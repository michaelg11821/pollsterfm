
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `UserChoice` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UserChoice
 * 
 */
export type UserChoiceModel = runtime.Types.Result.DefaultSelection<Prisma.$UserChoicePayload>

export type AggregateUserChoice = {
  _count: UserChoiceCountAggregateOutputType | null
  _avg: UserChoiceAvgAggregateOutputType | null
  _sum: UserChoiceSumAggregateOutputType | null
  _min: UserChoiceMinAggregateOutputType | null
  _max: UserChoiceMaxAggregateOutputType | null
}

export type UserChoiceAvgAggregateOutputType = {
  id: number | null
  choiceId: number | null
  pollId: number | null
}

export type UserChoiceSumAggregateOutputType = {
  id: number | null
  choiceId: number | null
  pollId: number | null
}

export type UserChoiceMinAggregateOutputType = {
  id: number | null
  userId: string | null
  choiceId: number | null
  pollId: number | null
}

export type UserChoiceMaxAggregateOutputType = {
  id: number | null
  userId: string | null
  choiceId: number | null
  pollId: number | null
}

export type UserChoiceCountAggregateOutputType = {
  id: number
  userId: number
  choiceId: number
  pollId: number
  _all: number
}


export type UserChoiceAvgAggregateInputType = {
  id?: true
  choiceId?: true
  pollId?: true
}

export type UserChoiceSumAggregateInputType = {
  id?: true
  choiceId?: true
  pollId?: true
}

export type UserChoiceMinAggregateInputType = {
  id?: true
  userId?: true
  choiceId?: true
  pollId?: true
}

export type UserChoiceMaxAggregateInputType = {
  id?: true
  userId?: true
  choiceId?: true
  pollId?: true
}

export type UserChoiceCountAggregateInputType = {
  id?: true
  userId?: true
  choiceId?: true
  pollId?: true
  _all?: true
}

export type UserChoiceAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserChoice to aggregate.
   */
  where?: Prisma.UserChoiceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserChoices to fetch.
   */
  orderBy?: Prisma.UserChoiceOrderByWithRelationInput | Prisma.UserChoiceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserChoiceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserChoices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserChoices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserChoices
  **/
  _count?: true | UserChoiceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UserChoiceAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UserChoiceSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserChoiceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserChoiceMaxAggregateInputType
}

export type GetUserChoiceAggregateType<T extends UserChoiceAggregateArgs> = {
      [P in keyof T & keyof AggregateUserChoice]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserChoice[P]>
    : Prisma.GetScalarType<T[P], AggregateUserChoice[P]>
}




export type UserChoiceGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserChoiceWhereInput
  orderBy?: Prisma.UserChoiceOrderByWithAggregationInput | Prisma.UserChoiceOrderByWithAggregationInput[]
  by: Prisma.UserChoiceScalarFieldEnum[] | Prisma.UserChoiceScalarFieldEnum
  having?: Prisma.UserChoiceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserChoiceCountAggregateInputType | true
  _avg?: UserChoiceAvgAggregateInputType
  _sum?: UserChoiceSumAggregateInputType
  _min?: UserChoiceMinAggregateInputType
  _max?: UserChoiceMaxAggregateInputType
}

export type UserChoiceGroupByOutputType = {
  id: number
  userId: string
  choiceId: number
  pollId: number
  _count: UserChoiceCountAggregateOutputType | null
  _avg: UserChoiceAvgAggregateOutputType | null
  _sum: UserChoiceSumAggregateOutputType | null
  _min: UserChoiceMinAggregateOutputType | null
  _max: UserChoiceMaxAggregateOutputType | null
}

type GetUserChoiceGroupByPayload<T extends UserChoiceGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserChoiceGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserChoiceGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserChoiceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserChoiceGroupByOutputType[P]>
      }
    >
  > 



export type UserChoiceWhereInput = {
  AND?: Prisma.UserChoiceWhereInput | Prisma.UserChoiceWhereInput[]
  OR?: Prisma.UserChoiceWhereInput[]
  NOT?: Prisma.UserChoiceWhereInput | Prisma.UserChoiceWhereInput[]
  id?: Prisma.IntFilter<"UserChoice"> | number
  userId?: Prisma.StringFilter<"UserChoice"> | string
  choiceId?: Prisma.IntFilter<"UserChoice"> | number
  pollId?: Prisma.IntFilter<"UserChoice"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  choice?: Prisma.XOR<Prisma.ChoiceScalarRelationFilter, Prisma.ChoiceWhereInput>
  poll?: Prisma.XOR<Prisma.PollScalarRelationFilter, Prisma.PollWhereInput>
}

export type UserChoiceOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  choiceId?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  choice?: Prisma.ChoiceOrderByWithRelationInput
  poll?: Prisma.PollOrderByWithRelationInput
}

export type UserChoiceWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  userId_pollId?: Prisma.UserChoiceUserIdPollIdCompoundUniqueInput
  AND?: Prisma.UserChoiceWhereInput | Prisma.UserChoiceWhereInput[]
  OR?: Prisma.UserChoiceWhereInput[]
  NOT?: Prisma.UserChoiceWhereInput | Prisma.UserChoiceWhereInput[]
  userId?: Prisma.StringFilter<"UserChoice"> | string
  choiceId?: Prisma.IntFilter<"UserChoice"> | number
  pollId?: Prisma.IntFilter<"UserChoice"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  choice?: Prisma.XOR<Prisma.ChoiceScalarRelationFilter, Prisma.ChoiceWhereInput>
  poll?: Prisma.XOR<Prisma.PollScalarRelationFilter, Prisma.PollWhereInput>
}, "id" | "userId_pollId">

export type UserChoiceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  choiceId?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
  _count?: Prisma.UserChoiceCountOrderByAggregateInput
  _avg?: Prisma.UserChoiceAvgOrderByAggregateInput
  _max?: Prisma.UserChoiceMaxOrderByAggregateInput
  _min?: Prisma.UserChoiceMinOrderByAggregateInput
  _sum?: Prisma.UserChoiceSumOrderByAggregateInput
}

export type UserChoiceScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserChoiceScalarWhereWithAggregatesInput | Prisma.UserChoiceScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserChoiceScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserChoiceScalarWhereWithAggregatesInput | Prisma.UserChoiceScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"UserChoice"> | number
  userId?: Prisma.StringWithAggregatesFilter<"UserChoice"> | string
  choiceId?: Prisma.IntWithAggregatesFilter<"UserChoice"> | number
  pollId?: Prisma.IntWithAggregatesFilter<"UserChoice"> | number
}

export type UserChoiceCreateInput = {
  user: Prisma.UserCreateNestedOneWithoutChoicesInput
  choice: Prisma.ChoiceCreateNestedOneWithoutUserChoicesInput
  poll: Prisma.PollCreateNestedOneWithoutParticipantChoicesInput
}

export type UserChoiceUncheckedCreateInput = {
  id?: number
  userId: string
  choiceId: number
  pollId: number
}

export type UserChoiceUpdateInput = {
  user?: Prisma.UserUpdateOneRequiredWithoutChoicesNestedInput
  choice?: Prisma.ChoiceUpdateOneRequiredWithoutUserChoicesNestedInput
  poll?: Prisma.PollUpdateOneRequiredWithoutParticipantChoicesNestedInput
}

export type UserChoiceUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  choiceId?: Prisma.IntFieldUpdateOperationsInput | number
  pollId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type UserChoiceCreateManyInput = {
  id?: number
  userId: string
  choiceId: number
  pollId: number
}

export type UserChoiceUpdateManyMutationInput = {

}

export type UserChoiceUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  choiceId?: Prisma.IntFieldUpdateOperationsInput | number
  pollId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type UserChoiceListRelationFilter = {
  every?: Prisma.UserChoiceWhereInput
  some?: Prisma.UserChoiceWhereInput
  none?: Prisma.UserChoiceWhereInput
}

export type UserChoiceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserChoiceUserIdPollIdCompoundUniqueInput = {
  userId: string
  pollId: number
}

export type UserChoiceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  choiceId?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
}

export type UserChoiceAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  choiceId?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
}

export type UserChoiceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  choiceId?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
}

export type UserChoiceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  choiceId?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
}

export type UserChoiceSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  choiceId?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
}

export type UserChoiceCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserChoiceCreateWithoutUserInput, Prisma.UserChoiceUncheckedCreateWithoutUserInput> | Prisma.UserChoiceCreateWithoutUserInput[] | Prisma.UserChoiceUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserChoiceCreateOrConnectWithoutUserInput | Prisma.UserChoiceCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserChoiceCreateManyUserInputEnvelope
  connect?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
}

export type UserChoiceUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserChoiceCreateWithoutUserInput, Prisma.UserChoiceUncheckedCreateWithoutUserInput> | Prisma.UserChoiceCreateWithoutUserInput[] | Prisma.UserChoiceUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserChoiceCreateOrConnectWithoutUserInput | Prisma.UserChoiceCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserChoiceCreateManyUserInputEnvelope
  connect?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
}

export type UserChoiceUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserChoiceCreateWithoutUserInput, Prisma.UserChoiceUncheckedCreateWithoutUserInput> | Prisma.UserChoiceCreateWithoutUserInput[] | Prisma.UserChoiceUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserChoiceCreateOrConnectWithoutUserInput | Prisma.UserChoiceCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserChoiceUpsertWithWhereUniqueWithoutUserInput | Prisma.UserChoiceUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserChoiceCreateManyUserInputEnvelope
  set?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  disconnect?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  delete?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  connect?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  update?: Prisma.UserChoiceUpdateWithWhereUniqueWithoutUserInput | Prisma.UserChoiceUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserChoiceUpdateManyWithWhereWithoutUserInput | Prisma.UserChoiceUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserChoiceScalarWhereInput | Prisma.UserChoiceScalarWhereInput[]
}

export type UserChoiceUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserChoiceCreateWithoutUserInput, Prisma.UserChoiceUncheckedCreateWithoutUserInput> | Prisma.UserChoiceCreateWithoutUserInput[] | Prisma.UserChoiceUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserChoiceCreateOrConnectWithoutUserInput | Prisma.UserChoiceCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserChoiceUpsertWithWhereUniqueWithoutUserInput | Prisma.UserChoiceUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserChoiceCreateManyUserInputEnvelope
  set?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  disconnect?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  delete?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  connect?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  update?: Prisma.UserChoiceUpdateWithWhereUniqueWithoutUserInput | Prisma.UserChoiceUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserChoiceUpdateManyWithWhereWithoutUserInput | Prisma.UserChoiceUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserChoiceScalarWhereInput | Prisma.UserChoiceScalarWhereInput[]
}

export type UserChoiceCreateNestedManyWithoutPollInput = {
  create?: Prisma.XOR<Prisma.UserChoiceCreateWithoutPollInput, Prisma.UserChoiceUncheckedCreateWithoutPollInput> | Prisma.UserChoiceCreateWithoutPollInput[] | Prisma.UserChoiceUncheckedCreateWithoutPollInput[]
  connectOrCreate?: Prisma.UserChoiceCreateOrConnectWithoutPollInput | Prisma.UserChoiceCreateOrConnectWithoutPollInput[]
  createMany?: Prisma.UserChoiceCreateManyPollInputEnvelope
  connect?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
}

export type UserChoiceUncheckedCreateNestedManyWithoutPollInput = {
  create?: Prisma.XOR<Prisma.UserChoiceCreateWithoutPollInput, Prisma.UserChoiceUncheckedCreateWithoutPollInput> | Prisma.UserChoiceCreateWithoutPollInput[] | Prisma.UserChoiceUncheckedCreateWithoutPollInput[]
  connectOrCreate?: Prisma.UserChoiceCreateOrConnectWithoutPollInput | Prisma.UserChoiceCreateOrConnectWithoutPollInput[]
  createMany?: Prisma.UserChoiceCreateManyPollInputEnvelope
  connect?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
}

export type UserChoiceUpdateManyWithoutPollNestedInput = {
  create?: Prisma.XOR<Prisma.UserChoiceCreateWithoutPollInput, Prisma.UserChoiceUncheckedCreateWithoutPollInput> | Prisma.UserChoiceCreateWithoutPollInput[] | Prisma.UserChoiceUncheckedCreateWithoutPollInput[]
  connectOrCreate?: Prisma.UserChoiceCreateOrConnectWithoutPollInput | Prisma.UserChoiceCreateOrConnectWithoutPollInput[]
  upsert?: Prisma.UserChoiceUpsertWithWhereUniqueWithoutPollInput | Prisma.UserChoiceUpsertWithWhereUniqueWithoutPollInput[]
  createMany?: Prisma.UserChoiceCreateManyPollInputEnvelope
  set?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  disconnect?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  delete?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  connect?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  update?: Prisma.UserChoiceUpdateWithWhereUniqueWithoutPollInput | Prisma.UserChoiceUpdateWithWhereUniqueWithoutPollInput[]
  updateMany?: Prisma.UserChoiceUpdateManyWithWhereWithoutPollInput | Prisma.UserChoiceUpdateManyWithWhereWithoutPollInput[]
  deleteMany?: Prisma.UserChoiceScalarWhereInput | Prisma.UserChoiceScalarWhereInput[]
}

export type UserChoiceUncheckedUpdateManyWithoutPollNestedInput = {
  create?: Prisma.XOR<Prisma.UserChoiceCreateWithoutPollInput, Prisma.UserChoiceUncheckedCreateWithoutPollInput> | Prisma.UserChoiceCreateWithoutPollInput[] | Prisma.UserChoiceUncheckedCreateWithoutPollInput[]
  connectOrCreate?: Prisma.UserChoiceCreateOrConnectWithoutPollInput | Prisma.UserChoiceCreateOrConnectWithoutPollInput[]
  upsert?: Prisma.UserChoiceUpsertWithWhereUniqueWithoutPollInput | Prisma.UserChoiceUpsertWithWhereUniqueWithoutPollInput[]
  createMany?: Prisma.UserChoiceCreateManyPollInputEnvelope
  set?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  disconnect?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  delete?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  connect?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  update?: Prisma.UserChoiceUpdateWithWhereUniqueWithoutPollInput | Prisma.UserChoiceUpdateWithWhereUniqueWithoutPollInput[]
  updateMany?: Prisma.UserChoiceUpdateManyWithWhereWithoutPollInput | Prisma.UserChoiceUpdateManyWithWhereWithoutPollInput[]
  deleteMany?: Prisma.UserChoiceScalarWhereInput | Prisma.UserChoiceScalarWhereInput[]
}

export type UserChoiceCreateNestedManyWithoutChoiceInput = {
  create?: Prisma.XOR<Prisma.UserChoiceCreateWithoutChoiceInput, Prisma.UserChoiceUncheckedCreateWithoutChoiceInput> | Prisma.UserChoiceCreateWithoutChoiceInput[] | Prisma.UserChoiceUncheckedCreateWithoutChoiceInput[]
  connectOrCreate?: Prisma.UserChoiceCreateOrConnectWithoutChoiceInput | Prisma.UserChoiceCreateOrConnectWithoutChoiceInput[]
  createMany?: Prisma.UserChoiceCreateManyChoiceInputEnvelope
  connect?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
}

export type UserChoiceUncheckedCreateNestedManyWithoutChoiceInput = {
  create?: Prisma.XOR<Prisma.UserChoiceCreateWithoutChoiceInput, Prisma.UserChoiceUncheckedCreateWithoutChoiceInput> | Prisma.UserChoiceCreateWithoutChoiceInput[] | Prisma.UserChoiceUncheckedCreateWithoutChoiceInput[]
  connectOrCreate?: Prisma.UserChoiceCreateOrConnectWithoutChoiceInput | Prisma.UserChoiceCreateOrConnectWithoutChoiceInput[]
  createMany?: Prisma.UserChoiceCreateManyChoiceInputEnvelope
  connect?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
}

export type UserChoiceUpdateManyWithoutChoiceNestedInput = {
  create?: Prisma.XOR<Prisma.UserChoiceCreateWithoutChoiceInput, Prisma.UserChoiceUncheckedCreateWithoutChoiceInput> | Prisma.UserChoiceCreateWithoutChoiceInput[] | Prisma.UserChoiceUncheckedCreateWithoutChoiceInput[]
  connectOrCreate?: Prisma.UserChoiceCreateOrConnectWithoutChoiceInput | Prisma.UserChoiceCreateOrConnectWithoutChoiceInput[]
  upsert?: Prisma.UserChoiceUpsertWithWhereUniqueWithoutChoiceInput | Prisma.UserChoiceUpsertWithWhereUniqueWithoutChoiceInput[]
  createMany?: Prisma.UserChoiceCreateManyChoiceInputEnvelope
  set?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  disconnect?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  delete?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  connect?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  update?: Prisma.UserChoiceUpdateWithWhereUniqueWithoutChoiceInput | Prisma.UserChoiceUpdateWithWhereUniqueWithoutChoiceInput[]
  updateMany?: Prisma.UserChoiceUpdateManyWithWhereWithoutChoiceInput | Prisma.UserChoiceUpdateManyWithWhereWithoutChoiceInput[]
  deleteMany?: Prisma.UserChoiceScalarWhereInput | Prisma.UserChoiceScalarWhereInput[]
}

export type UserChoiceUncheckedUpdateManyWithoutChoiceNestedInput = {
  create?: Prisma.XOR<Prisma.UserChoiceCreateWithoutChoiceInput, Prisma.UserChoiceUncheckedCreateWithoutChoiceInput> | Prisma.UserChoiceCreateWithoutChoiceInput[] | Prisma.UserChoiceUncheckedCreateWithoutChoiceInput[]
  connectOrCreate?: Prisma.UserChoiceCreateOrConnectWithoutChoiceInput | Prisma.UserChoiceCreateOrConnectWithoutChoiceInput[]
  upsert?: Prisma.UserChoiceUpsertWithWhereUniqueWithoutChoiceInput | Prisma.UserChoiceUpsertWithWhereUniqueWithoutChoiceInput[]
  createMany?: Prisma.UserChoiceCreateManyChoiceInputEnvelope
  set?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  disconnect?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  delete?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  connect?: Prisma.UserChoiceWhereUniqueInput | Prisma.UserChoiceWhereUniqueInput[]
  update?: Prisma.UserChoiceUpdateWithWhereUniqueWithoutChoiceInput | Prisma.UserChoiceUpdateWithWhereUniqueWithoutChoiceInput[]
  updateMany?: Prisma.UserChoiceUpdateManyWithWhereWithoutChoiceInput | Prisma.UserChoiceUpdateManyWithWhereWithoutChoiceInput[]
  deleteMany?: Prisma.UserChoiceScalarWhereInput | Prisma.UserChoiceScalarWhereInput[]
}

export type UserChoiceCreateWithoutUserInput = {
  choice: Prisma.ChoiceCreateNestedOneWithoutUserChoicesInput
  poll: Prisma.PollCreateNestedOneWithoutParticipantChoicesInput
}

export type UserChoiceUncheckedCreateWithoutUserInput = {
  id?: number
  choiceId: number
  pollId: number
}

export type UserChoiceCreateOrConnectWithoutUserInput = {
  where: Prisma.UserChoiceWhereUniqueInput
  create: Prisma.XOR<Prisma.UserChoiceCreateWithoutUserInput, Prisma.UserChoiceUncheckedCreateWithoutUserInput>
}

export type UserChoiceCreateManyUserInputEnvelope = {
  data: Prisma.UserChoiceCreateManyUserInput | Prisma.UserChoiceCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type UserChoiceUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserChoiceWhereUniqueInput
  update: Prisma.XOR<Prisma.UserChoiceUpdateWithoutUserInput, Prisma.UserChoiceUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserChoiceCreateWithoutUserInput, Prisma.UserChoiceUncheckedCreateWithoutUserInput>
}

export type UserChoiceUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserChoiceWhereUniqueInput
  data: Prisma.XOR<Prisma.UserChoiceUpdateWithoutUserInput, Prisma.UserChoiceUncheckedUpdateWithoutUserInput>
}

export type UserChoiceUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserChoiceScalarWhereInput
  data: Prisma.XOR<Prisma.UserChoiceUpdateManyMutationInput, Prisma.UserChoiceUncheckedUpdateManyWithoutUserInput>
}

export type UserChoiceScalarWhereInput = {
  AND?: Prisma.UserChoiceScalarWhereInput | Prisma.UserChoiceScalarWhereInput[]
  OR?: Prisma.UserChoiceScalarWhereInput[]
  NOT?: Prisma.UserChoiceScalarWhereInput | Prisma.UserChoiceScalarWhereInput[]
  id?: Prisma.IntFilter<"UserChoice"> | number
  userId?: Prisma.StringFilter<"UserChoice"> | string
  choiceId?: Prisma.IntFilter<"UserChoice"> | number
  pollId?: Prisma.IntFilter<"UserChoice"> | number
}

export type UserChoiceCreateWithoutPollInput = {
  user: Prisma.UserCreateNestedOneWithoutChoicesInput
  choice: Prisma.ChoiceCreateNestedOneWithoutUserChoicesInput
}

export type UserChoiceUncheckedCreateWithoutPollInput = {
  id?: number
  userId: string
  choiceId: number
}

export type UserChoiceCreateOrConnectWithoutPollInput = {
  where: Prisma.UserChoiceWhereUniqueInput
  create: Prisma.XOR<Prisma.UserChoiceCreateWithoutPollInput, Prisma.UserChoiceUncheckedCreateWithoutPollInput>
}

export type UserChoiceCreateManyPollInputEnvelope = {
  data: Prisma.UserChoiceCreateManyPollInput | Prisma.UserChoiceCreateManyPollInput[]
  skipDuplicates?: boolean
}

export type UserChoiceUpsertWithWhereUniqueWithoutPollInput = {
  where: Prisma.UserChoiceWhereUniqueInput
  update: Prisma.XOR<Prisma.UserChoiceUpdateWithoutPollInput, Prisma.UserChoiceUncheckedUpdateWithoutPollInput>
  create: Prisma.XOR<Prisma.UserChoiceCreateWithoutPollInput, Prisma.UserChoiceUncheckedCreateWithoutPollInput>
}

export type UserChoiceUpdateWithWhereUniqueWithoutPollInput = {
  where: Prisma.UserChoiceWhereUniqueInput
  data: Prisma.XOR<Prisma.UserChoiceUpdateWithoutPollInput, Prisma.UserChoiceUncheckedUpdateWithoutPollInput>
}

export type UserChoiceUpdateManyWithWhereWithoutPollInput = {
  where: Prisma.UserChoiceScalarWhereInput
  data: Prisma.XOR<Prisma.UserChoiceUpdateManyMutationInput, Prisma.UserChoiceUncheckedUpdateManyWithoutPollInput>
}

export type UserChoiceCreateWithoutChoiceInput = {
  user: Prisma.UserCreateNestedOneWithoutChoicesInput
  poll: Prisma.PollCreateNestedOneWithoutParticipantChoicesInput
}

export type UserChoiceUncheckedCreateWithoutChoiceInput = {
  id?: number
  userId: string
  pollId: number
}

export type UserChoiceCreateOrConnectWithoutChoiceInput = {
  where: Prisma.UserChoiceWhereUniqueInput
  create: Prisma.XOR<Prisma.UserChoiceCreateWithoutChoiceInput, Prisma.UserChoiceUncheckedCreateWithoutChoiceInput>
}

export type UserChoiceCreateManyChoiceInputEnvelope = {
  data: Prisma.UserChoiceCreateManyChoiceInput | Prisma.UserChoiceCreateManyChoiceInput[]
  skipDuplicates?: boolean
}

export type UserChoiceUpsertWithWhereUniqueWithoutChoiceInput = {
  where: Prisma.UserChoiceWhereUniqueInput
  update: Prisma.XOR<Prisma.UserChoiceUpdateWithoutChoiceInput, Prisma.UserChoiceUncheckedUpdateWithoutChoiceInput>
  create: Prisma.XOR<Prisma.UserChoiceCreateWithoutChoiceInput, Prisma.UserChoiceUncheckedCreateWithoutChoiceInput>
}

export type UserChoiceUpdateWithWhereUniqueWithoutChoiceInput = {
  where: Prisma.UserChoiceWhereUniqueInput
  data: Prisma.XOR<Prisma.UserChoiceUpdateWithoutChoiceInput, Prisma.UserChoiceUncheckedUpdateWithoutChoiceInput>
}

export type UserChoiceUpdateManyWithWhereWithoutChoiceInput = {
  where: Prisma.UserChoiceScalarWhereInput
  data: Prisma.XOR<Prisma.UserChoiceUpdateManyMutationInput, Prisma.UserChoiceUncheckedUpdateManyWithoutChoiceInput>
}

export type UserChoiceCreateManyUserInput = {
  id?: number
  choiceId: number
  pollId: number
}

export type UserChoiceUpdateWithoutUserInput = {
  choice?: Prisma.ChoiceUpdateOneRequiredWithoutUserChoicesNestedInput
  poll?: Prisma.PollUpdateOneRequiredWithoutParticipantChoicesNestedInput
}

export type UserChoiceUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  choiceId?: Prisma.IntFieldUpdateOperationsInput | number
  pollId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type UserChoiceUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  choiceId?: Prisma.IntFieldUpdateOperationsInput | number
  pollId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type UserChoiceCreateManyPollInput = {
  id?: number
  userId: string
  choiceId: number
}

export type UserChoiceUpdateWithoutPollInput = {
  user?: Prisma.UserUpdateOneRequiredWithoutChoicesNestedInput
  choice?: Prisma.ChoiceUpdateOneRequiredWithoutUserChoicesNestedInput
}

export type UserChoiceUncheckedUpdateWithoutPollInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  choiceId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type UserChoiceUncheckedUpdateManyWithoutPollInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  choiceId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type UserChoiceCreateManyChoiceInput = {
  id?: number
  userId: string
  pollId: number
}

export type UserChoiceUpdateWithoutChoiceInput = {
  user?: Prisma.UserUpdateOneRequiredWithoutChoicesNestedInput
  poll?: Prisma.PollUpdateOneRequiredWithoutParticipantChoicesNestedInput
}

export type UserChoiceUncheckedUpdateWithoutChoiceInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  pollId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type UserChoiceUncheckedUpdateManyWithoutChoiceInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  pollId?: Prisma.IntFieldUpdateOperationsInput | number
}



export type UserChoiceSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  choiceId?: boolean
  pollId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  choice?: boolean | Prisma.ChoiceDefaultArgs<ExtArgs>
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userChoice"]>

export type UserChoiceSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  choiceId?: boolean
  pollId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  choice?: boolean | Prisma.ChoiceDefaultArgs<ExtArgs>
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userChoice"]>

export type UserChoiceSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  choiceId?: boolean
  pollId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  choice?: boolean | Prisma.ChoiceDefaultArgs<ExtArgs>
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userChoice"]>

export type UserChoiceSelectScalar = {
  id?: boolean
  userId?: boolean
  choiceId?: boolean
  pollId?: boolean
}

export type UserChoiceOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "choiceId" | "pollId", ExtArgs["result"]["userChoice"]>
export type UserChoiceInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  choice?: boolean | Prisma.ChoiceDefaultArgs<ExtArgs>
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
}
export type UserChoiceIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  choice?: boolean | Prisma.ChoiceDefaultArgs<ExtArgs>
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
}
export type UserChoiceIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  choice?: boolean | Prisma.ChoiceDefaultArgs<ExtArgs>
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
}

export type $UserChoicePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserChoice"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    choice: Prisma.$ChoicePayload<ExtArgs>
    poll: Prisma.$PollPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    userId: string
    choiceId: number
    pollId: number
  }, ExtArgs["result"]["userChoice"]>
  composites: {}
}

export type UserChoiceGetPayload<S extends boolean | null | undefined | UserChoiceDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserChoicePayload, S>

export type UserChoiceCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserChoiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserChoiceCountAggregateInputType | true
  }

export interface UserChoiceDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserChoice'], meta: { name: 'UserChoice' } }
  /**
   * Find zero or one UserChoice that matches the filter.
   * @param {UserChoiceFindUniqueArgs} args - Arguments to find a UserChoice
   * @example
   * // Get one UserChoice
   * const userChoice = await prisma.userChoice.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserChoiceFindUniqueArgs>(args: Prisma.SelectSubset<T, UserChoiceFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserChoiceClient<runtime.Types.Result.GetResult<Prisma.$UserChoicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserChoice that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserChoiceFindUniqueOrThrowArgs} args - Arguments to find a UserChoice
   * @example
   * // Get one UserChoice
   * const userChoice = await prisma.userChoice.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserChoiceFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserChoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserChoiceClient<runtime.Types.Result.GetResult<Prisma.$UserChoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserChoice that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChoiceFindFirstArgs} args - Arguments to find a UserChoice
   * @example
   * // Get one UserChoice
   * const userChoice = await prisma.userChoice.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserChoiceFindFirstArgs>(args?: Prisma.SelectSubset<T, UserChoiceFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserChoiceClient<runtime.Types.Result.GetResult<Prisma.$UserChoicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserChoice that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChoiceFindFirstOrThrowArgs} args - Arguments to find a UserChoice
   * @example
   * // Get one UserChoice
   * const userChoice = await prisma.userChoice.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserChoiceFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserChoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserChoiceClient<runtime.Types.Result.GetResult<Prisma.$UserChoicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserChoices that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChoiceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserChoices
   * const userChoices = await prisma.userChoice.findMany()
   * 
   * // Get first 10 UserChoices
   * const userChoices = await prisma.userChoice.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userChoiceWithIdOnly = await prisma.userChoice.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserChoiceFindManyArgs>(args?: Prisma.SelectSubset<T, UserChoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserChoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserChoice.
   * @param {UserChoiceCreateArgs} args - Arguments to create a UserChoice.
   * @example
   * // Create one UserChoice
   * const UserChoice = await prisma.userChoice.create({
   *   data: {
   *     // ... data to create a UserChoice
   *   }
   * })
   * 
   */
  create<T extends UserChoiceCreateArgs>(args: Prisma.SelectSubset<T, UserChoiceCreateArgs<ExtArgs>>): Prisma.Prisma__UserChoiceClient<runtime.Types.Result.GetResult<Prisma.$UserChoicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserChoices.
   * @param {UserChoiceCreateManyArgs} args - Arguments to create many UserChoices.
   * @example
   * // Create many UserChoices
   * const userChoice = await prisma.userChoice.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserChoiceCreateManyArgs>(args?: Prisma.SelectSubset<T, UserChoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserChoices and returns the data saved in the database.
   * @param {UserChoiceCreateManyAndReturnArgs} args - Arguments to create many UserChoices.
   * @example
   * // Create many UserChoices
   * const userChoice = await prisma.userChoice.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserChoices and only return the `id`
   * const userChoiceWithIdOnly = await prisma.userChoice.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserChoiceCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserChoiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserChoicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserChoice.
   * @param {UserChoiceDeleteArgs} args - Arguments to delete one UserChoice.
   * @example
   * // Delete one UserChoice
   * const UserChoice = await prisma.userChoice.delete({
   *   where: {
   *     // ... filter to delete one UserChoice
   *   }
   * })
   * 
   */
  delete<T extends UserChoiceDeleteArgs>(args: Prisma.SelectSubset<T, UserChoiceDeleteArgs<ExtArgs>>): Prisma.Prisma__UserChoiceClient<runtime.Types.Result.GetResult<Prisma.$UserChoicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserChoice.
   * @param {UserChoiceUpdateArgs} args - Arguments to update one UserChoice.
   * @example
   * // Update one UserChoice
   * const userChoice = await prisma.userChoice.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserChoiceUpdateArgs>(args: Prisma.SelectSubset<T, UserChoiceUpdateArgs<ExtArgs>>): Prisma.Prisma__UserChoiceClient<runtime.Types.Result.GetResult<Prisma.$UserChoicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserChoices.
   * @param {UserChoiceDeleteManyArgs} args - Arguments to filter UserChoices to delete.
   * @example
   * // Delete a few UserChoices
   * const { count } = await prisma.userChoice.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserChoiceDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserChoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserChoices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChoiceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserChoices
   * const userChoice = await prisma.userChoice.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserChoiceUpdateManyArgs>(args: Prisma.SelectSubset<T, UserChoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserChoices and returns the data updated in the database.
   * @param {UserChoiceUpdateManyAndReturnArgs} args - Arguments to update many UserChoices.
   * @example
   * // Update many UserChoices
   * const userChoice = await prisma.userChoice.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserChoices and only return the `id`
   * const userChoiceWithIdOnly = await prisma.userChoice.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserChoiceUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserChoiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserChoicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserChoice.
   * @param {UserChoiceUpsertArgs} args - Arguments to update or create a UserChoice.
   * @example
   * // Update or create a UserChoice
   * const userChoice = await prisma.userChoice.upsert({
   *   create: {
   *     // ... data to create a UserChoice
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserChoice we want to update
   *   }
   * })
   */
  upsert<T extends UserChoiceUpsertArgs>(args: Prisma.SelectSubset<T, UserChoiceUpsertArgs<ExtArgs>>): Prisma.Prisma__UserChoiceClient<runtime.Types.Result.GetResult<Prisma.$UserChoicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserChoices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChoiceCountArgs} args - Arguments to filter UserChoices to count.
   * @example
   * // Count the number of UserChoices
   * const count = await prisma.userChoice.count({
   *   where: {
   *     // ... the filter for the UserChoices we want to count
   *   }
   * })
  **/
  count<T extends UserChoiceCountArgs>(
    args?: Prisma.Subset<T, UserChoiceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserChoiceCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserChoice.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserChoiceAggregateArgs>(args: Prisma.Subset<T, UserChoiceAggregateArgs>): Prisma.PrismaPromise<GetUserChoiceAggregateType<T>>

  /**
   * Group by UserChoice.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserChoiceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserChoiceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserChoiceGroupByArgs['orderBy'] }
      : { orderBy?: UserChoiceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserChoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserChoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserChoice model
 */
readonly fields: UserChoiceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserChoice.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserChoiceClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  choice<T extends Prisma.ChoiceDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChoiceDefaultArgs<ExtArgs>>): Prisma.Prisma__ChoiceClient<runtime.Types.Result.GetResult<Prisma.$ChoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  poll<T extends Prisma.PollDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PollDefaultArgs<ExtArgs>>): Prisma.Prisma__PollClient<runtime.Types.Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserChoice model
 */
export interface UserChoiceFieldRefs {
  readonly id: Prisma.FieldRef<"UserChoice", 'Int'>
  readonly userId: Prisma.FieldRef<"UserChoice", 'String'>
  readonly choiceId: Prisma.FieldRef<"UserChoice", 'Int'>
  readonly pollId: Prisma.FieldRef<"UserChoice", 'Int'>
}
    

// Custom InputTypes
/**
 * UserChoice findUnique
 */
export type UserChoiceFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChoice
   */
  select?: Prisma.UserChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChoice
   */
  omit?: Prisma.UserChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChoiceInclude<ExtArgs> | null
  /**
   * Filter, which UserChoice to fetch.
   */
  where: Prisma.UserChoiceWhereUniqueInput
}

/**
 * UserChoice findUniqueOrThrow
 */
export type UserChoiceFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChoice
   */
  select?: Prisma.UserChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChoice
   */
  omit?: Prisma.UserChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChoiceInclude<ExtArgs> | null
  /**
   * Filter, which UserChoice to fetch.
   */
  where: Prisma.UserChoiceWhereUniqueInput
}

/**
 * UserChoice findFirst
 */
export type UserChoiceFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChoice
   */
  select?: Prisma.UserChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChoice
   */
  omit?: Prisma.UserChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChoiceInclude<ExtArgs> | null
  /**
   * Filter, which UserChoice to fetch.
   */
  where?: Prisma.UserChoiceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserChoices to fetch.
   */
  orderBy?: Prisma.UserChoiceOrderByWithRelationInput | Prisma.UserChoiceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserChoices.
   */
  cursor?: Prisma.UserChoiceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserChoices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserChoices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserChoices.
   */
  distinct?: Prisma.UserChoiceScalarFieldEnum | Prisma.UserChoiceScalarFieldEnum[]
}

/**
 * UserChoice findFirstOrThrow
 */
export type UserChoiceFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChoice
   */
  select?: Prisma.UserChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChoice
   */
  omit?: Prisma.UserChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChoiceInclude<ExtArgs> | null
  /**
   * Filter, which UserChoice to fetch.
   */
  where?: Prisma.UserChoiceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserChoices to fetch.
   */
  orderBy?: Prisma.UserChoiceOrderByWithRelationInput | Prisma.UserChoiceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserChoices.
   */
  cursor?: Prisma.UserChoiceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserChoices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserChoices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserChoices.
   */
  distinct?: Prisma.UserChoiceScalarFieldEnum | Prisma.UserChoiceScalarFieldEnum[]
}

/**
 * UserChoice findMany
 */
export type UserChoiceFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChoice
   */
  select?: Prisma.UserChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChoice
   */
  omit?: Prisma.UserChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChoiceInclude<ExtArgs> | null
  /**
   * Filter, which UserChoices to fetch.
   */
  where?: Prisma.UserChoiceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserChoices to fetch.
   */
  orderBy?: Prisma.UserChoiceOrderByWithRelationInput | Prisma.UserChoiceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserChoices.
   */
  cursor?: Prisma.UserChoiceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserChoices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserChoices.
   */
  skip?: number
  distinct?: Prisma.UserChoiceScalarFieldEnum | Prisma.UserChoiceScalarFieldEnum[]
}

/**
 * UserChoice create
 */
export type UserChoiceCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChoice
   */
  select?: Prisma.UserChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChoice
   */
  omit?: Prisma.UserChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChoiceInclude<ExtArgs> | null
  /**
   * The data needed to create a UserChoice.
   */
  data: Prisma.XOR<Prisma.UserChoiceCreateInput, Prisma.UserChoiceUncheckedCreateInput>
}

/**
 * UserChoice createMany
 */
export type UserChoiceCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserChoices.
   */
  data: Prisma.UserChoiceCreateManyInput | Prisma.UserChoiceCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserChoice createManyAndReturn
 */
export type UserChoiceCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChoice
   */
  select?: Prisma.UserChoiceSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserChoice
   */
  omit?: Prisma.UserChoiceOmit<ExtArgs> | null
  /**
   * The data used to create many UserChoices.
   */
  data: Prisma.UserChoiceCreateManyInput | Prisma.UserChoiceCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChoiceIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserChoice update
 */
export type UserChoiceUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChoice
   */
  select?: Prisma.UserChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChoice
   */
  omit?: Prisma.UserChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChoiceInclude<ExtArgs> | null
  /**
   * The data needed to update a UserChoice.
   */
  data: Prisma.XOR<Prisma.UserChoiceUpdateInput, Prisma.UserChoiceUncheckedUpdateInput>
  /**
   * Choose, which UserChoice to update.
   */
  where: Prisma.UserChoiceWhereUniqueInput
}

/**
 * UserChoice updateMany
 */
export type UserChoiceUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserChoices.
   */
  data: Prisma.XOR<Prisma.UserChoiceUpdateManyMutationInput, Prisma.UserChoiceUncheckedUpdateManyInput>
  /**
   * Filter which UserChoices to update
   */
  where?: Prisma.UserChoiceWhereInput
  /**
   * Limit how many UserChoices to update.
   */
  limit?: number
}

/**
 * UserChoice updateManyAndReturn
 */
export type UserChoiceUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChoice
   */
  select?: Prisma.UserChoiceSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserChoice
   */
  omit?: Prisma.UserChoiceOmit<ExtArgs> | null
  /**
   * The data used to update UserChoices.
   */
  data: Prisma.XOR<Prisma.UserChoiceUpdateManyMutationInput, Prisma.UserChoiceUncheckedUpdateManyInput>
  /**
   * Filter which UserChoices to update
   */
  where?: Prisma.UserChoiceWhereInput
  /**
   * Limit how many UserChoices to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChoiceIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserChoice upsert
 */
export type UserChoiceUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChoice
   */
  select?: Prisma.UserChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChoice
   */
  omit?: Prisma.UserChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChoiceInclude<ExtArgs> | null
  /**
   * The filter to search for the UserChoice to update in case it exists.
   */
  where: Prisma.UserChoiceWhereUniqueInput
  /**
   * In case the UserChoice found by the `where` argument doesn't exist, create a new UserChoice with this data.
   */
  create: Prisma.XOR<Prisma.UserChoiceCreateInput, Prisma.UserChoiceUncheckedCreateInput>
  /**
   * In case the UserChoice was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserChoiceUpdateInput, Prisma.UserChoiceUncheckedUpdateInput>
}

/**
 * UserChoice delete
 */
export type UserChoiceDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChoice
   */
  select?: Prisma.UserChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChoice
   */
  omit?: Prisma.UserChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChoiceInclude<ExtArgs> | null
  /**
   * Filter which UserChoice to delete.
   */
  where: Prisma.UserChoiceWhereUniqueInput
}

/**
 * UserChoice deleteMany
 */
export type UserChoiceDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserChoices to delete
   */
  where?: Prisma.UserChoiceWhereInput
  /**
   * Limit how many UserChoices to delete.
   */
  limit?: number
}

/**
 * UserChoice without action
 */
export type UserChoiceDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChoice
   */
  select?: Prisma.UserChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChoice
   */
  omit?: Prisma.UserChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChoiceInclude<ExtArgs> | null
}
