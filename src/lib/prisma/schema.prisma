generator client {
    provider      = "prisma-client"
    output        = "./client"
    binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum ChoiceType {
    GENRE
    ARTIST
    SONG
    ALBUM
}

enum AffinityType {
    LAWFUL
    EVIL
    BALANCED
    GOOD
    CHAOTIC
    NEUTRAL
    MELANCHOLIC
    FRAGILE
    TRANSCENDENT
    ETHEREAL
    PASSIONATE
    INTROSPECTIVE
    MINIMALISTIC
    SOULFUL
    DYNAMIC
    HAUNTING
    POETIC
}

model User {
    id String @id @default(cuid())

    name     String?
    username String  @unique @default(cuid())
    aboutMe  String?

    email         String    @unique
    emailVerified DateTime?

    accounts Account[]
    sessions Session[]

    image       String? // link to cloud storage where image is stored
    headerImage String? // another link to cloud storage 

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    affinities Affinity[]

    createdPolls Poll[] @relation(name: "PollCreator")

    participatedPolls Poll[]       @relation(name: "PollParticipants")
    choices           UserChoice[]
}

model Account {
    userId String

    type String

    provider          String
    providerAccountId String

    refresh_token String? @map("refreshToken")
    access_token  String? @map("accessToken")
    expires_at    Int?    @map("expiresAt")
    token_type    String? @map("tokenType")

    scope    String?
    id_token String? @map("idToken")

    session_state String? @map("sessionState")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Poll {
    id Int @id @default(autoincrement())

    title       String
    description String?

    createdAt DateTime @default(now())

    creatorId String
    creator   User   @relation(name: "PollCreator", fields: [creatorId], references: [id])

    choices Choice[]

    participants       User[]       @relation(name: "PollParticipants")
    participantChoices UserChoice[]
}

// model Genre {
//   id Int @id @default(autoincrement())

//   name String @unique

//   artists Artist[]
//   songs   Song[]
//   albums  Album[]

//   choices Choice[]
// }

// model Artist {
//   id Int @id @default(autoincrement())

//   name String @unique

//   genres      Genre[]
//   songs       Song[]
//   discography Album[]

//   choices Choice[]
// }

// model Song {
//   id Int @id @default(autoincrement())

//   name String

//   genres  Genre[]
//   authors Artist[]
//   albums  Album[]

//   choices Choice[]
// }

// model Album {
//   id Int @id @default(autoincrement())

//   name String @unique

//   genres Genre[]
//   artist Artist[]
//   songs  Song[]

//   choices Choice[]
// }

model Choice {
    id Int @id @default(autoincrement())

    type ChoiceType

    genreUrl  String?
    artistUrl String?
    trackUrl  String?
    albumUrl  String?

    pollId Int
    poll   Poll @relation(fields: [pollId], references: [id])

    userChoices UserChoice[] // users who selected this choice
}

model UserChoice {
    id Int @id @default(autoincrement())

    userId String
    user   User   @relation(fields: [userId], references: [id])

    choiceId Int
    choice   Choice @relation(fields: [choiceId], references: [id])

    pollId Int
    poll   Poll @relation(fields: [pollId], references: [id])

    @@unique([userId, pollId]) // one choice per poll
}

model Affinity {
    id Int @id @default(autoincrement())

    userId String
    user   User   @relation(fields: [userId], references: [id])

    type AffinityType

    score Int @default(0) // percentage score (0-100)

    @@unique([userId, type]) // ensure a user can only have one score per affinity type
}
