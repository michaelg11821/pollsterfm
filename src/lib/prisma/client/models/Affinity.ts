
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Affinity` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Affinity
 * 
 */
export type AffinityModel = runtime.Types.Result.DefaultSelection<Prisma.$AffinityPayload>

export type AggregateAffinity = {
  _count: AffinityCountAggregateOutputType | null
  _avg: AffinityAvgAggregateOutputType | null
  _sum: AffinitySumAggregateOutputType | null
  _min: AffinityMinAggregateOutputType | null
  _max: AffinityMaxAggregateOutputType | null
}

export type AffinityAvgAggregateOutputType = {
  id: number | null
  score: number | null
}

export type AffinitySumAggregateOutputType = {
  id: number | null
  score: number | null
}

export type AffinityMinAggregateOutputType = {
  id: number | null
  userId: string | null
  type: $Enums.AffinityType | null
  score: number | null
}

export type AffinityMaxAggregateOutputType = {
  id: number | null
  userId: string | null
  type: $Enums.AffinityType | null
  score: number | null
}

export type AffinityCountAggregateOutputType = {
  id: number
  userId: number
  type: number
  score: number
  _all: number
}


export type AffinityAvgAggregateInputType = {
  id?: true
  score?: true
}

export type AffinitySumAggregateInputType = {
  id?: true
  score?: true
}

export type AffinityMinAggregateInputType = {
  id?: true
  userId?: true
  type?: true
  score?: true
}

export type AffinityMaxAggregateInputType = {
  id?: true
  userId?: true
  type?: true
  score?: true
}

export type AffinityCountAggregateInputType = {
  id?: true
  userId?: true
  type?: true
  score?: true
  _all?: true
}

export type AffinityAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Affinity to aggregate.
   */
  where?: Prisma.AffinityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Affinities to fetch.
   */
  orderBy?: Prisma.AffinityOrderByWithRelationInput | Prisma.AffinityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AffinityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Affinities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Affinities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Affinities
  **/
  _count?: true | AffinityCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AffinityAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AffinitySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AffinityMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AffinityMaxAggregateInputType
}

export type GetAffinityAggregateType<T extends AffinityAggregateArgs> = {
      [P in keyof T & keyof AggregateAffinity]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAffinity[P]>
    : Prisma.GetScalarType<T[P], AggregateAffinity[P]>
}




export type AffinityGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AffinityWhereInput
  orderBy?: Prisma.AffinityOrderByWithAggregationInput | Prisma.AffinityOrderByWithAggregationInput[]
  by: Prisma.AffinityScalarFieldEnum[] | Prisma.AffinityScalarFieldEnum
  having?: Prisma.AffinityScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AffinityCountAggregateInputType | true
  _avg?: AffinityAvgAggregateInputType
  _sum?: AffinitySumAggregateInputType
  _min?: AffinityMinAggregateInputType
  _max?: AffinityMaxAggregateInputType
}

export type AffinityGroupByOutputType = {
  id: number
  userId: string
  type: $Enums.AffinityType
  score: number
  _count: AffinityCountAggregateOutputType | null
  _avg: AffinityAvgAggregateOutputType | null
  _sum: AffinitySumAggregateOutputType | null
  _min: AffinityMinAggregateOutputType | null
  _max: AffinityMaxAggregateOutputType | null
}

type GetAffinityGroupByPayload<T extends AffinityGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AffinityGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AffinityGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AffinityGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AffinityGroupByOutputType[P]>
      }
    >
  > 



export type AffinityWhereInput = {
  AND?: Prisma.AffinityWhereInput | Prisma.AffinityWhereInput[]
  OR?: Prisma.AffinityWhereInput[]
  NOT?: Prisma.AffinityWhereInput | Prisma.AffinityWhereInput[]
  id?: Prisma.IntFilter<"Affinity"> | number
  userId?: Prisma.StringFilter<"Affinity"> | string
  type?: Prisma.EnumAffinityTypeFilter<"Affinity"> | $Enums.AffinityType
  score?: Prisma.IntFilter<"Affinity"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type AffinityOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  score?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type AffinityWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  userId_type?: Prisma.AffinityUserIdTypeCompoundUniqueInput
  AND?: Prisma.AffinityWhereInput | Prisma.AffinityWhereInput[]
  OR?: Prisma.AffinityWhereInput[]
  NOT?: Prisma.AffinityWhereInput | Prisma.AffinityWhereInput[]
  userId?: Prisma.StringFilter<"Affinity"> | string
  type?: Prisma.EnumAffinityTypeFilter<"Affinity"> | $Enums.AffinityType
  score?: Prisma.IntFilter<"Affinity"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "userId_type">

export type AffinityOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  score?: Prisma.SortOrder
  _count?: Prisma.AffinityCountOrderByAggregateInput
  _avg?: Prisma.AffinityAvgOrderByAggregateInput
  _max?: Prisma.AffinityMaxOrderByAggregateInput
  _min?: Prisma.AffinityMinOrderByAggregateInput
  _sum?: Prisma.AffinitySumOrderByAggregateInput
}

export type AffinityScalarWhereWithAggregatesInput = {
  AND?: Prisma.AffinityScalarWhereWithAggregatesInput | Prisma.AffinityScalarWhereWithAggregatesInput[]
  OR?: Prisma.AffinityScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AffinityScalarWhereWithAggregatesInput | Prisma.AffinityScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Affinity"> | number
  userId?: Prisma.StringWithAggregatesFilter<"Affinity"> | string
  type?: Prisma.EnumAffinityTypeWithAggregatesFilter<"Affinity"> | $Enums.AffinityType
  score?: Prisma.IntWithAggregatesFilter<"Affinity"> | number
}

export type AffinityCreateInput = {
  type: $Enums.AffinityType
  score?: number
  user: Prisma.UserCreateNestedOneWithoutAffinitiesInput
}

export type AffinityUncheckedCreateInput = {
  id?: number
  userId: string
  type: $Enums.AffinityType
  score?: number
}

export type AffinityUpdateInput = {
  type?: Prisma.EnumAffinityTypeFieldUpdateOperationsInput | $Enums.AffinityType
  score?: Prisma.IntFieldUpdateOperationsInput | number
  user?: Prisma.UserUpdateOneRequiredWithoutAffinitiesNestedInput
}

export type AffinityUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumAffinityTypeFieldUpdateOperationsInput | $Enums.AffinityType
  score?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AffinityCreateManyInput = {
  id?: number
  userId: string
  type: $Enums.AffinityType
  score?: number
}

export type AffinityUpdateManyMutationInput = {
  type?: Prisma.EnumAffinityTypeFieldUpdateOperationsInput | $Enums.AffinityType
  score?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AffinityUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumAffinityTypeFieldUpdateOperationsInput | $Enums.AffinityType
  score?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AffinityListRelationFilter = {
  every?: Prisma.AffinityWhereInput
  some?: Prisma.AffinityWhereInput
  none?: Prisma.AffinityWhereInput
}

export type AffinityOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AffinityUserIdTypeCompoundUniqueInput = {
  userId: string
  type: $Enums.AffinityType
}

export type AffinityCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  score?: Prisma.SortOrder
}

export type AffinityAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  score?: Prisma.SortOrder
}

export type AffinityMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  score?: Prisma.SortOrder
}

export type AffinityMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  score?: Prisma.SortOrder
}

export type AffinitySumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  score?: Prisma.SortOrder
}

export type AffinityCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AffinityCreateWithoutUserInput, Prisma.AffinityUncheckedCreateWithoutUserInput> | Prisma.AffinityCreateWithoutUserInput[] | Prisma.AffinityUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AffinityCreateOrConnectWithoutUserInput | Prisma.AffinityCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AffinityCreateManyUserInputEnvelope
  connect?: Prisma.AffinityWhereUniqueInput | Prisma.AffinityWhereUniqueInput[]
}

export type AffinityUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AffinityCreateWithoutUserInput, Prisma.AffinityUncheckedCreateWithoutUserInput> | Prisma.AffinityCreateWithoutUserInput[] | Prisma.AffinityUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AffinityCreateOrConnectWithoutUserInput | Prisma.AffinityCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AffinityCreateManyUserInputEnvelope
  connect?: Prisma.AffinityWhereUniqueInput | Prisma.AffinityWhereUniqueInput[]
}

export type AffinityUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AffinityCreateWithoutUserInput, Prisma.AffinityUncheckedCreateWithoutUserInput> | Prisma.AffinityCreateWithoutUserInput[] | Prisma.AffinityUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AffinityCreateOrConnectWithoutUserInput | Prisma.AffinityCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AffinityUpsertWithWhereUniqueWithoutUserInput | Prisma.AffinityUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AffinityCreateManyUserInputEnvelope
  set?: Prisma.AffinityWhereUniqueInput | Prisma.AffinityWhereUniqueInput[]
  disconnect?: Prisma.AffinityWhereUniqueInput | Prisma.AffinityWhereUniqueInput[]
  delete?: Prisma.AffinityWhereUniqueInput | Prisma.AffinityWhereUniqueInput[]
  connect?: Prisma.AffinityWhereUniqueInput | Prisma.AffinityWhereUniqueInput[]
  update?: Prisma.AffinityUpdateWithWhereUniqueWithoutUserInput | Prisma.AffinityUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AffinityUpdateManyWithWhereWithoutUserInput | Prisma.AffinityUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AffinityScalarWhereInput | Prisma.AffinityScalarWhereInput[]
}

export type AffinityUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AffinityCreateWithoutUserInput, Prisma.AffinityUncheckedCreateWithoutUserInput> | Prisma.AffinityCreateWithoutUserInput[] | Prisma.AffinityUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AffinityCreateOrConnectWithoutUserInput | Prisma.AffinityCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AffinityUpsertWithWhereUniqueWithoutUserInput | Prisma.AffinityUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AffinityCreateManyUserInputEnvelope
  set?: Prisma.AffinityWhereUniqueInput | Prisma.AffinityWhereUniqueInput[]
  disconnect?: Prisma.AffinityWhereUniqueInput | Prisma.AffinityWhereUniqueInput[]
  delete?: Prisma.AffinityWhereUniqueInput | Prisma.AffinityWhereUniqueInput[]
  connect?: Prisma.AffinityWhereUniqueInput | Prisma.AffinityWhereUniqueInput[]
  update?: Prisma.AffinityUpdateWithWhereUniqueWithoutUserInput | Prisma.AffinityUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AffinityUpdateManyWithWhereWithoutUserInput | Prisma.AffinityUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AffinityScalarWhereInput | Prisma.AffinityScalarWhereInput[]
}

export type EnumAffinityTypeFieldUpdateOperationsInput = {
  set?: $Enums.AffinityType
}

export type AffinityCreateWithoutUserInput = {
  type: $Enums.AffinityType
  score?: number
}

export type AffinityUncheckedCreateWithoutUserInput = {
  id?: number
  type: $Enums.AffinityType
  score?: number
}

export type AffinityCreateOrConnectWithoutUserInput = {
  where: Prisma.AffinityWhereUniqueInput
  create: Prisma.XOR<Prisma.AffinityCreateWithoutUserInput, Prisma.AffinityUncheckedCreateWithoutUserInput>
}

export type AffinityCreateManyUserInputEnvelope = {
  data: Prisma.AffinityCreateManyUserInput | Prisma.AffinityCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type AffinityUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.AffinityWhereUniqueInput
  update: Prisma.XOR<Prisma.AffinityUpdateWithoutUserInput, Prisma.AffinityUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.AffinityCreateWithoutUserInput, Prisma.AffinityUncheckedCreateWithoutUserInput>
}

export type AffinityUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.AffinityWhereUniqueInput
  data: Prisma.XOR<Prisma.AffinityUpdateWithoutUserInput, Prisma.AffinityUncheckedUpdateWithoutUserInput>
}

export type AffinityUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.AffinityScalarWhereInput
  data: Prisma.XOR<Prisma.AffinityUpdateManyMutationInput, Prisma.AffinityUncheckedUpdateManyWithoutUserInput>
}

export type AffinityScalarWhereInput = {
  AND?: Prisma.AffinityScalarWhereInput | Prisma.AffinityScalarWhereInput[]
  OR?: Prisma.AffinityScalarWhereInput[]
  NOT?: Prisma.AffinityScalarWhereInput | Prisma.AffinityScalarWhereInput[]
  id?: Prisma.IntFilter<"Affinity"> | number
  userId?: Prisma.StringFilter<"Affinity"> | string
  type?: Prisma.EnumAffinityTypeFilter<"Affinity"> | $Enums.AffinityType
  score?: Prisma.IntFilter<"Affinity"> | number
}

export type AffinityCreateManyUserInput = {
  id?: number
  type: $Enums.AffinityType
  score?: number
}

export type AffinityUpdateWithoutUserInput = {
  type?: Prisma.EnumAffinityTypeFieldUpdateOperationsInput | $Enums.AffinityType
  score?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AffinityUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumAffinityTypeFieldUpdateOperationsInput | $Enums.AffinityType
  score?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AffinityUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumAffinityTypeFieldUpdateOperationsInput | $Enums.AffinityType
  score?: Prisma.IntFieldUpdateOperationsInput | number
}



export type AffinitySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  type?: boolean
  score?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["affinity"]>

export type AffinitySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  type?: boolean
  score?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["affinity"]>

export type AffinitySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  type?: boolean
  score?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["affinity"]>

export type AffinitySelectScalar = {
  id?: boolean
  userId?: boolean
  type?: boolean
  score?: boolean
}

export type AffinityOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "type" | "score", ExtArgs["result"]["affinity"]>
export type AffinityInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AffinityIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AffinityIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $AffinityPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Affinity"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    userId: string
    type: $Enums.AffinityType
    score: number
  }, ExtArgs["result"]["affinity"]>
  composites: {}
}

export type AffinityGetPayload<S extends boolean | null | undefined | AffinityDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AffinityPayload, S>

export type AffinityCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AffinityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AffinityCountAggregateInputType | true
  }

export interface AffinityDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Affinity'], meta: { name: 'Affinity' } }
  /**
   * Find zero or one Affinity that matches the filter.
   * @param {AffinityFindUniqueArgs} args - Arguments to find a Affinity
   * @example
   * // Get one Affinity
   * const affinity = await prisma.affinity.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AffinityFindUniqueArgs>(args: Prisma.SelectSubset<T, AffinityFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AffinityClient<runtime.Types.Result.GetResult<Prisma.$AffinityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Affinity that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AffinityFindUniqueOrThrowArgs} args - Arguments to find a Affinity
   * @example
   * // Get one Affinity
   * const affinity = await prisma.affinity.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AffinityFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AffinityFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AffinityClient<runtime.Types.Result.GetResult<Prisma.$AffinityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Affinity that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AffinityFindFirstArgs} args - Arguments to find a Affinity
   * @example
   * // Get one Affinity
   * const affinity = await prisma.affinity.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AffinityFindFirstArgs>(args?: Prisma.SelectSubset<T, AffinityFindFirstArgs<ExtArgs>>): Prisma.Prisma__AffinityClient<runtime.Types.Result.GetResult<Prisma.$AffinityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Affinity that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AffinityFindFirstOrThrowArgs} args - Arguments to find a Affinity
   * @example
   * // Get one Affinity
   * const affinity = await prisma.affinity.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AffinityFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AffinityFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AffinityClient<runtime.Types.Result.GetResult<Prisma.$AffinityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Affinities that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AffinityFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Affinities
   * const affinities = await prisma.affinity.findMany()
   * 
   * // Get first 10 Affinities
   * const affinities = await prisma.affinity.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const affinityWithIdOnly = await prisma.affinity.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AffinityFindManyArgs>(args?: Prisma.SelectSubset<T, AffinityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AffinityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Affinity.
   * @param {AffinityCreateArgs} args - Arguments to create a Affinity.
   * @example
   * // Create one Affinity
   * const Affinity = await prisma.affinity.create({
   *   data: {
   *     // ... data to create a Affinity
   *   }
   * })
   * 
   */
  create<T extends AffinityCreateArgs>(args: Prisma.SelectSubset<T, AffinityCreateArgs<ExtArgs>>): Prisma.Prisma__AffinityClient<runtime.Types.Result.GetResult<Prisma.$AffinityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Affinities.
   * @param {AffinityCreateManyArgs} args - Arguments to create many Affinities.
   * @example
   * // Create many Affinities
   * const affinity = await prisma.affinity.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AffinityCreateManyArgs>(args?: Prisma.SelectSubset<T, AffinityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Affinities and returns the data saved in the database.
   * @param {AffinityCreateManyAndReturnArgs} args - Arguments to create many Affinities.
   * @example
   * // Create many Affinities
   * const affinity = await prisma.affinity.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Affinities and only return the `id`
   * const affinityWithIdOnly = await prisma.affinity.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AffinityCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AffinityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AffinityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Affinity.
   * @param {AffinityDeleteArgs} args - Arguments to delete one Affinity.
   * @example
   * // Delete one Affinity
   * const Affinity = await prisma.affinity.delete({
   *   where: {
   *     // ... filter to delete one Affinity
   *   }
   * })
   * 
   */
  delete<T extends AffinityDeleteArgs>(args: Prisma.SelectSubset<T, AffinityDeleteArgs<ExtArgs>>): Prisma.Prisma__AffinityClient<runtime.Types.Result.GetResult<Prisma.$AffinityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Affinity.
   * @param {AffinityUpdateArgs} args - Arguments to update one Affinity.
   * @example
   * // Update one Affinity
   * const affinity = await prisma.affinity.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AffinityUpdateArgs>(args: Prisma.SelectSubset<T, AffinityUpdateArgs<ExtArgs>>): Prisma.Prisma__AffinityClient<runtime.Types.Result.GetResult<Prisma.$AffinityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Affinities.
   * @param {AffinityDeleteManyArgs} args - Arguments to filter Affinities to delete.
   * @example
   * // Delete a few Affinities
   * const { count } = await prisma.affinity.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AffinityDeleteManyArgs>(args?: Prisma.SelectSubset<T, AffinityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Affinities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AffinityUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Affinities
   * const affinity = await prisma.affinity.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AffinityUpdateManyArgs>(args: Prisma.SelectSubset<T, AffinityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Affinities and returns the data updated in the database.
   * @param {AffinityUpdateManyAndReturnArgs} args - Arguments to update many Affinities.
   * @example
   * // Update many Affinities
   * const affinity = await prisma.affinity.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Affinities and only return the `id`
   * const affinityWithIdOnly = await prisma.affinity.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AffinityUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AffinityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AffinityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Affinity.
   * @param {AffinityUpsertArgs} args - Arguments to update or create a Affinity.
   * @example
   * // Update or create a Affinity
   * const affinity = await prisma.affinity.upsert({
   *   create: {
   *     // ... data to create a Affinity
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Affinity we want to update
   *   }
   * })
   */
  upsert<T extends AffinityUpsertArgs>(args: Prisma.SelectSubset<T, AffinityUpsertArgs<ExtArgs>>): Prisma.Prisma__AffinityClient<runtime.Types.Result.GetResult<Prisma.$AffinityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Affinities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AffinityCountArgs} args - Arguments to filter Affinities to count.
   * @example
   * // Count the number of Affinities
   * const count = await prisma.affinity.count({
   *   where: {
   *     // ... the filter for the Affinities we want to count
   *   }
   * })
  **/
  count<T extends AffinityCountArgs>(
    args?: Prisma.Subset<T, AffinityCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AffinityCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Affinity.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AffinityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AffinityAggregateArgs>(args: Prisma.Subset<T, AffinityAggregateArgs>): Prisma.PrismaPromise<GetAffinityAggregateType<T>>

  /**
   * Group by Affinity.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AffinityGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AffinityGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AffinityGroupByArgs['orderBy'] }
      : { orderBy?: AffinityGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AffinityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAffinityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Affinity model
 */
readonly fields: AffinityFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Affinity.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AffinityClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Affinity model
 */
export interface AffinityFieldRefs {
  readonly id: Prisma.FieldRef<"Affinity", 'Int'>
  readonly userId: Prisma.FieldRef<"Affinity", 'String'>
  readonly type: Prisma.FieldRef<"Affinity", 'AffinityType'>
  readonly score: Prisma.FieldRef<"Affinity", 'Int'>
}
    

// Custom InputTypes
/**
 * Affinity findUnique
 */
export type AffinityFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Affinity
   */
  select?: Prisma.AffinitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Affinity
   */
  omit?: Prisma.AffinityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AffinityInclude<ExtArgs> | null
  /**
   * Filter, which Affinity to fetch.
   */
  where: Prisma.AffinityWhereUniqueInput
}

/**
 * Affinity findUniqueOrThrow
 */
export type AffinityFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Affinity
   */
  select?: Prisma.AffinitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Affinity
   */
  omit?: Prisma.AffinityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AffinityInclude<ExtArgs> | null
  /**
   * Filter, which Affinity to fetch.
   */
  where: Prisma.AffinityWhereUniqueInput
}

/**
 * Affinity findFirst
 */
export type AffinityFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Affinity
   */
  select?: Prisma.AffinitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Affinity
   */
  omit?: Prisma.AffinityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AffinityInclude<ExtArgs> | null
  /**
   * Filter, which Affinity to fetch.
   */
  where?: Prisma.AffinityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Affinities to fetch.
   */
  orderBy?: Prisma.AffinityOrderByWithRelationInput | Prisma.AffinityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Affinities.
   */
  cursor?: Prisma.AffinityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Affinities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Affinities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Affinities.
   */
  distinct?: Prisma.AffinityScalarFieldEnum | Prisma.AffinityScalarFieldEnum[]
}

/**
 * Affinity findFirstOrThrow
 */
export type AffinityFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Affinity
   */
  select?: Prisma.AffinitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Affinity
   */
  omit?: Prisma.AffinityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AffinityInclude<ExtArgs> | null
  /**
   * Filter, which Affinity to fetch.
   */
  where?: Prisma.AffinityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Affinities to fetch.
   */
  orderBy?: Prisma.AffinityOrderByWithRelationInput | Prisma.AffinityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Affinities.
   */
  cursor?: Prisma.AffinityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Affinities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Affinities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Affinities.
   */
  distinct?: Prisma.AffinityScalarFieldEnum | Prisma.AffinityScalarFieldEnum[]
}

/**
 * Affinity findMany
 */
export type AffinityFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Affinity
   */
  select?: Prisma.AffinitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Affinity
   */
  omit?: Prisma.AffinityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AffinityInclude<ExtArgs> | null
  /**
   * Filter, which Affinities to fetch.
   */
  where?: Prisma.AffinityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Affinities to fetch.
   */
  orderBy?: Prisma.AffinityOrderByWithRelationInput | Prisma.AffinityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Affinities.
   */
  cursor?: Prisma.AffinityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Affinities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Affinities.
   */
  skip?: number
  distinct?: Prisma.AffinityScalarFieldEnum | Prisma.AffinityScalarFieldEnum[]
}

/**
 * Affinity create
 */
export type AffinityCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Affinity
   */
  select?: Prisma.AffinitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Affinity
   */
  omit?: Prisma.AffinityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AffinityInclude<ExtArgs> | null
  /**
   * The data needed to create a Affinity.
   */
  data: Prisma.XOR<Prisma.AffinityCreateInput, Prisma.AffinityUncheckedCreateInput>
}

/**
 * Affinity createMany
 */
export type AffinityCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Affinities.
   */
  data: Prisma.AffinityCreateManyInput | Prisma.AffinityCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Affinity createManyAndReturn
 */
export type AffinityCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Affinity
   */
  select?: Prisma.AffinitySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Affinity
   */
  omit?: Prisma.AffinityOmit<ExtArgs> | null
  /**
   * The data used to create many Affinities.
   */
  data: Prisma.AffinityCreateManyInput | Prisma.AffinityCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AffinityIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Affinity update
 */
export type AffinityUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Affinity
   */
  select?: Prisma.AffinitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Affinity
   */
  omit?: Prisma.AffinityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AffinityInclude<ExtArgs> | null
  /**
   * The data needed to update a Affinity.
   */
  data: Prisma.XOR<Prisma.AffinityUpdateInput, Prisma.AffinityUncheckedUpdateInput>
  /**
   * Choose, which Affinity to update.
   */
  where: Prisma.AffinityWhereUniqueInput
}

/**
 * Affinity updateMany
 */
export type AffinityUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Affinities.
   */
  data: Prisma.XOR<Prisma.AffinityUpdateManyMutationInput, Prisma.AffinityUncheckedUpdateManyInput>
  /**
   * Filter which Affinities to update
   */
  where?: Prisma.AffinityWhereInput
  /**
   * Limit how many Affinities to update.
   */
  limit?: number
}

/**
 * Affinity updateManyAndReturn
 */
export type AffinityUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Affinity
   */
  select?: Prisma.AffinitySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Affinity
   */
  omit?: Prisma.AffinityOmit<ExtArgs> | null
  /**
   * The data used to update Affinities.
   */
  data: Prisma.XOR<Prisma.AffinityUpdateManyMutationInput, Prisma.AffinityUncheckedUpdateManyInput>
  /**
   * Filter which Affinities to update
   */
  where?: Prisma.AffinityWhereInput
  /**
   * Limit how many Affinities to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AffinityIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Affinity upsert
 */
export type AffinityUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Affinity
   */
  select?: Prisma.AffinitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Affinity
   */
  omit?: Prisma.AffinityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AffinityInclude<ExtArgs> | null
  /**
   * The filter to search for the Affinity to update in case it exists.
   */
  where: Prisma.AffinityWhereUniqueInput
  /**
   * In case the Affinity found by the `where` argument doesn't exist, create a new Affinity with this data.
   */
  create: Prisma.XOR<Prisma.AffinityCreateInput, Prisma.AffinityUncheckedCreateInput>
  /**
   * In case the Affinity was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AffinityUpdateInput, Prisma.AffinityUncheckedUpdateInput>
}

/**
 * Affinity delete
 */
export type AffinityDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Affinity
   */
  select?: Prisma.AffinitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Affinity
   */
  omit?: Prisma.AffinityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AffinityInclude<ExtArgs> | null
  /**
   * Filter which Affinity to delete.
   */
  where: Prisma.AffinityWhereUniqueInput
}

/**
 * Affinity deleteMany
 */
export type AffinityDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Affinities to delete
   */
  where?: Prisma.AffinityWhereInput
  /**
   * Limit how many Affinities to delete.
   */
  limit?: number
}

/**
 * Affinity without action
 */
export type AffinityDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Affinity
   */
  select?: Prisma.AffinitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Affinity
   */
  omit?: Prisma.AffinityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AffinityInclude<ExtArgs> | null
}
