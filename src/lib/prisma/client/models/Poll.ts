
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Poll` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Poll
 * 
 */
export type PollModel = runtime.Types.Result.DefaultSelection<Prisma.$PollPayload>

export type AggregatePoll = {
  _count: PollCountAggregateOutputType | null
  _avg: PollAvgAggregateOutputType | null
  _sum: PollSumAggregateOutputType | null
  _min: PollMinAggregateOutputType | null
  _max: PollMaxAggregateOutputType | null
}

export type PollAvgAggregateOutputType = {
  id: number | null
}

export type PollSumAggregateOutputType = {
  id: number | null
}

export type PollMinAggregateOutputType = {
  id: number | null
  title: string | null
  description: string | null
  createdAt: Date | null
  creatorId: string | null
}

export type PollMaxAggregateOutputType = {
  id: number | null
  title: string | null
  description: string | null
  createdAt: Date | null
  creatorId: string | null
}

export type PollCountAggregateOutputType = {
  id: number
  title: number
  description: number
  createdAt: number
  creatorId: number
  _all: number
}


export type PollAvgAggregateInputType = {
  id?: true
}

export type PollSumAggregateInputType = {
  id?: true
}

export type PollMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  createdAt?: true
  creatorId?: true
}

export type PollMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  createdAt?: true
  creatorId?: true
}

export type PollCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  createdAt?: true
  creatorId?: true
  _all?: true
}

export type PollAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Poll to aggregate.
   */
  where?: Prisma.PollWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Polls to fetch.
   */
  orderBy?: Prisma.PollOrderByWithRelationInput | Prisma.PollOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PollWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Polls from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Polls.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Polls
  **/
  _count?: true | PollCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PollAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PollSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PollMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PollMaxAggregateInputType
}

export type GetPollAggregateType<T extends PollAggregateArgs> = {
      [P in keyof T & keyof AggregatePoll]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePoll[P]>
    : Prisma.GetScalarType<T[P], AggregatePoll[P]>
}




export type PollGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PollWhereInput
  orderBy?: Prisma.PollOrderByWithAggregationInput | Prisma.PollOrderByWithAggregationInput[]
  by: Prisma.PollScalarFieldEnum[] | Prisma.PollScalarFieldEnum
  having?: Prisma.PollScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PollCountAggregateInputType | true
  _avg?: PollAvgAggregateInputType
  _sum?: PollSumAggregateInputType
  _min?: PollMinAggregateInputType
  _max?: PollMaxAggregateInputType
}

export type PollGroupByOutputType = {
  id: number
  title: string
  description: string | null
  createdAt: Date
  creatorId: string
  _count: PollCountAggregateOutputType | null
  _avg: PollAvgAggregateOutputType | null
  _sum: PollSumAggregateOutputType | null
  _min: PollMinAggregateOutputType | null
  _max: PollMaxAggregateOutputType | null
}

type GetPollGroupByPayload<T extends PollGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PollGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PollGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PollGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PollGroupByOutputType[P]>
      }
    >
  > 



export type PollWhereInput = {
  AND?: Prisma.PollWhereInput | Prisma.PollWhereInput[]
  OR?: Prisma.PollWhereInput[]
  NOT?: Prisma.PollWhereInput | Prisma.PollWhereInput[]
  id?: Prisma.IntFilter<"Poll"> | number
  title?: Prisma.StringFilter<"Poll"> | string
  description?: Prisma.StringNullableFilter<"Poll"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Poll"> | Date | string
  creatorId?: Prisma.StringFilter<"Poll"> | string
  creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  choices?: Prisma.ChoiceListRelationFilter
  participants?: Prisma.UserListRelationFilter
  participantChoices?: Prisma.UserChoiceListRelationFilter
}

export type PollOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  creator?: Prisma.UserOrderByWithRelationInput
  choices?: Prisma.ChoiceOrderByRelationAggregateInput
  participants?: Prisma.UserOrderByRelationAggregateInput
  participantChoices?: Prisma.UserChoiceOrderByRelationAggregateInput
}

export type PollWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.PollWhereInput | Prisma.PollWhereInput[]
  OR?: Prisma.PollWhereInput[]
  NOT?: Prisma.PollWhereInput | Prisma.PollWhereInput[]
  title?: Prisma.StringFilter<"Poll"> | string
  description?: Prisma.StringNullableFilter<"Poll"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Poll"> | Date | string
  creatorId?: Prisma.StringFilter<"Poll"> | string
  creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  choices?: Prisma.ChoiceListRelationFilter
  participants?: Prisma.UserListRelationFilter
  participantChoices?: Prisma.UserChoiceListRelationFilter
}, "id">

export type PollOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  _count?: Prisma.PollCountOrderByAggregateInput
  _avg?: Prisma.PollAvgOrderByAggregateInput
  _max?: Prisma.PollMaxOrderByAggregateInput
  _min?: Prisma.PollMinOrderByAggregateInput
  _sum?: Prisma.PollSumOrderByAggregateInput
}

export type PollScalarWhereWithAggregatesInput = {
  AND?: Prisma.PollScalarWhereWithAggregatesInput | Prisma.PollScalarWhereWithAggregatesInput[]
  OR?: Prisma.PollScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PollScalarWhereWithAggregatesInput | Prisma.PollScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Poll"> | number
  title?: Prisma.StringWithAggregatesFilter<"Poll"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Poll"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Poll"> | Date | string
  creatorId?: Prisma.StringWithAggregatesFilter<"Poll"> | string
}

export type PollCreateInput = {
  title: string
  description?: string | null
  createdAt?: Date | string
  creator: Prisma.UserCreateNestedOneWithoutCreatedPollsInput
  choices?: Prisma.ChoiceCreateNestedManyWithoutPollInput
  participants?: Prisma.UserCreateNestedManyWithoutParticipatedPollsInput
  participantChoices?: Prisma.UserChoiceCreateNestedManyWithoutPollInput
}

export type PollUncheckedCreateInput = {
  id?: number
  title: string
  description?: string | null
  createdAt?: Date | string
  creatorId: string
  choices?: Prisma.ChoiceUncheckedCreateNestedManyWithoutPollInput
  participants?: Prisma.UserUncheckedCreateNestedManyWithoutParticipatedPollsInput
  participantChoices?: Prisma.UserChoiceUncheckedCreateNestedManyWithoutPollInput
}

export type PollUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creator?: Prisma.UserUpdateOneRequiredWithoutCreatedPollsNestedInput
  choices?: Prisma.ChoiceUpdateManyWithoutPollNestedInput
  participants?: Prisma.UserUpdateManyWithoutParticipatedPollsNestedInput
  participantChoices?: Prisma.UserChoiceUpdateManyWithoutPollNestedInput
}

export type PollUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  choices?: Prisma.ChoiceUncheckedUpdateManyWithoutPollNestedInput
  participants?: Prisma.UserUncheckedUpdateManyWithoutParticipatedPollsNestedInput
  participantChoices?: Prisma.UserChoiceUncheckedUpdateManyWithoutPollNestedInput
}

export type PollCreateManyInput = {
  id?: number
  title: string
  description?: string | null
  createdAt?: Date | string
  creatorId: string
}

export type PollUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PollUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PollListRelationFilter = {
  every?: Prisma.PollWhereInput
  some?: Prisma.PollWhereInput
  none?: Prisma.PollWhereInput
}

export type PollOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PollCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
}

export type PollAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PollMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
}

export type PollMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
}

export type PollSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PollScalarRelationFilter = {
  is?: Prisma.PollWhereInput
  isNot?: Prisma.PollWhereInput
}

export type PollCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.PollCreateWithoutCreatorInput, Prisma.PollUncheckedCreateWithoutCreatorInput> | Prisma.PollCreateWithoutCreatorInput[] | Prisma.PollUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutCreatorInput | Prisma.PollCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.PollCreateManyCreatorInputEnvelope
  connect?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[]
}

export type PollCreateNestedManyWithoutParticipantsInput = {
  create?: Prisma.XOR<Prisma.PollCreateWithoutParticipantsInput, Prisma.PollUncheckedCreateWithoutParticipantsInput> | Prisma.PollCreateWithoutParticipantsInput[] | Prisma.PollUncheckedCreateWithoutParticipantsInput[]
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutParticipantsInput | Prisma.PollCreateOrConnectWithoutParticipantsInput[]
  connect?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[]
}

export type PollUncheckedCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.PollCreateWithoutCreatorInput, Prisma.PollUncheckedCreateWithoutCreatorInput> | Prisma.PollCreateWithoutCreatorInput[] | Prisma.PollUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutCreatorInput | Prisma.PollCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.PollCreateManyCreatorInputEnvelope
  connect?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[]
}

export type PollUncheckedCreateNestedManyWithoutParticipantsInput = {
  create?: Prisma.XOR<Prisma.PollCreateWithoutParticipantsInput, Prisma.PollUncheckedCreateWithoutParticipantsInput> | Prisma.PollCreateWithoutParticipantsInput[] | Prisma.PollUncheckedCreateWithoutParticipantsInput[]
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutParticipantsInput | Prisma.PollCreateOrConnectWithoutParticipantsInput[]
  connect?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[]
}

export type PollUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.PollCreateWithoutCreatorInput, Prisma.PollUncheckedCreateWithoutCreatorInput> | Prisma.PollCreateWithoutCreatorInput[] | Prisma.PollUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutCreatorInput | Prisma.PollCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.PollUpsertWithWhereUniqueWithoutCreatorInput | Prisma.PollUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.PollCreateManyCreatorInputEnvelope
  set?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[]
  disconnect?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[]
  delete?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[]
  connect?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[]
  update?: Prisma.PollUpdateWithWhereUniqueWithoutCreatorInput | Prisma.PollUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.PollUpdateManyWithWhereWithoutCreatorInput | Prisma.PollUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.PollScalarWhereInput | Prisma.PollScalarWhereInput[]
}

export type PollUpdateManyWithoutParticipantsNestedInput = {
  create?: Prisma.XOR<Prisma.PollCreateWithoutParticipantsInput, Prisma.PollUncheckedCreateWithoutParticipantsInput> | Prisma.PollCreateWithoutParticipantsInput[] | Prisma.PollUncheckedCreateWithoutParticipantsInput[]
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutParticipantsInput | Prisma.PollCreateOrConnectWithoutParticipantsInput[]
  upsert?: Prisma.PollUpsertWithWhereUniqueWithoutParticipantsInput | Prisma.PollUpsertWithWhereUniqueWithoutParticipantsInput[]
  set?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[]
  disconnect?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[]
  delete?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[]
  connect?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[]
  update?: Prisma.PollUpdateWithWhereUniqueWithoutParticipantsInput | Prisma.PollUpdateWithWhereUniqueWithoutParticipantsInput[]
  updateMany?: Prisma.PollUpdateManyWithWhereWithoutParticipantsInput | Prisma.PollUpdateManyWithWhereWithoutParticipantsInput[]
  deleteMany?: Prisma.PollScalarWhereInput | Prisma.PollScalarWhereInput[]
}

export type PollUncheckedUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.PollCreateWithoutCreatorInput, Prisma.PollUncheckedCreateWithoutCreatorInput> | Prisma.PollCreateWithoutCreatorInput[] | Prisma.PollUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutCreatorInput | Prisma.PollCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.PollUpsertWithWhereUniqueWithoutCreatorInput | Prisma.PollUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.PollCreateManyCreatorInputEnvelope
  set?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[]
  disconnect?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[]
  delete?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[]
  connect?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[]
  update?: Prisma.PollUpdateWithWhereUniqueWithoutCreatorInput | Prisma.PollUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.PollUpdateManyWithWhereWithoutCreatorInput | Prisma.PollUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.PollScalarWhereInput | Prisma.PollScalarWhereInput[]
}

export type PollUncheckedUpdateManyWithoutParticipantsNestedInput = {
  create?: Prisma.XOR<Prisma.PollCreateWithoutParticipantsInput, Prisma.PollUncheckedCreateWithoutParticipantsInput> | Prisma.PollCreateWithoutParticipantsInput[] | Prisma.PollUncheckedCreateWithoutParticipantsInput[]
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutParticipantsInput | Prisma.PollCreateOrConnectWithoutParticipantsInput[]
  upsert?: Prisma.PollUpsertWithWhereUniqueWithoutParticipantsInput | Prisma.PollUpsertWithWhereUniqueWithoutParticipantsInput[]
  set?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[]
  disconnect?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[]
  delete?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[]
  connect?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[]
  update?: Prisma.PollUpdateWithWhereUniqueWithoutParticipantsInput | Prisma.PollUpdateWithWhereUniqueWithoutParticipantsInput[]
  updateMany?: Prisma.PollUpdateManyWithWhereWithoutParticipantsInput | Prisma.PollUpdateManyWithWhereWithoutParticipantsInput[]
  deleteMany?: Prisma.PollScalarWhereInput | Prisma.PollScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type PollCreateNestedOneWithoutChoicesInput = {
  create?: Prisma.XOR<Prisma.PollCreateWithoutChoicesInput, Prisma.PollUncheckedCreateWithoutChoicesInput>
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutChoicesInput
  connect?: Prisma.PollWhereUniqueInput
}

export type PollUpdateOneRequiredWithoutChoicesNestedInput = {
  create?: Prisma.XOR<Prisma.PollCreateWithoutChoicesInput, Prisma.PollUncheckedCreateWithoutChoicesInput>
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutChoicesInput
  upsert?: Prisma.PollUpsertWithoutChoicesInput
  connect?: Prisma.PollWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PollUpdateToOneWithWhereWithoutChoicesInput, Prisma.PollUpdateWithoutChoicesInput>, Prisma.PollUncheckedUpdateWithoutChoicesInput>
}

export type PollCreateNestedOneWithoutParticipantChoicesInput = {
  create?: Prisma.XOR<Prisma.PollCreateWithoutParticipantChoicesInput, Prisma.PollUncheckedCreateWithoutParticipantChoicesInput>
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutParticipantChoicesInput
  connect?: Prisma.PollWhereUniqueInput
}

export type PollUpdateOneRequiredWithoutParticipantChoicesNestedInput = {
  create?: Prisma.XOR<Prisma.PollCreateWithoutParticipantChoicesInput, Prisma.PollUncheckedCreateWithoutParticipantChoicesInput>
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutParticipantChoicesInput
  upsert?: Prisma.PollUpsertWithoutParticipantChoicesInput
  connect?: Prisma.PollWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PollUpdateToOneWithWhereWithoutParticipantChoicesInput, Prisma.PollUpdateWithoutParticipantChoicesInput>, Prisma.PollUncheckedUpdateWithoutParticipantChoicesInput>
}

export type PollCreateWithoutCreatorInput = {
  title: string
  description?: string | null
  createdAt?: Date | string
  choices?: Prisma.ChoiceCreateNestedManyWithoutPollInput
  participants?: Prisma.UserCreateNestedManyWithoutParticipatedPollsInput
  participantChoices?: Prisma.UserChoiceCreateNestedManyWithoutPollInput
}

export type PollUncheckedCreateWithoutCreatorInput = {
  id?: number
  title: string
  description?: string | null
  createdAt?: Date | string
  choices?: Prisma.ChoiceUncheckedCreateNestedManyWithoutPollInput
  participants?: Prisma.UserUncheckedCreateNestedManyWithoutParticipatedPollsInput
  participantChoices?: Prisma.UserChoiceUncheckedCreateNestedManyWithoutPollInput
}

export type PollCreateOrConnectWithoutCreatorInput = {
  where: Prisma.PollWhereUniqueInput
  create: Prisma.XOR<Prisma.PollCreateWithoutCreatorInput, Prisma.PollUncheckedCreateWithoutCreatorInput>
}

export type PollCreateManyCreatorInputEnvelope = {
  data: Prisma.PollCreateManyCreatorInput | Prisma.PollCreateManyCreatorInput[]
  skipDuplicates?: boolean
}

export type PollCreateWithoutParticipantsInput = {
  title: string
  description?: string | null
  createdAt?: Date | string
  creator: Prisma.UserCreateNestedOneWithoutCreatedPollsInput
  choices?: Prisma.ChoiceCreateNestedManyWithoutPollInput
  participantChoices?: Prisma.UserChoiceCreateNestedManyWithoutPollInput
}

export type PollUncheckedCreateWithoutParticipantsInput = {
  id?: number
  title: string
  description?: string | null
  createdAt?: Date | string
  creatorId: string
  choices?: Prisma.ChoiceUncheckedCreateNestedManyWithoutPollInput
  participantChoices?: Prisma.UserChoiceUncheckedCreateNestedManyWithoutPollInput
}

export type PollCreateOrConnectWithoutParticipantsInput = {
  where: Prisma.PollWhereUniqueInput
  create: Prisma.XOR<Prisma.PollCreateWithoutParticipantsInput, Prisma.PollUncheckedCreateWithoutParticipantsInput>
}

export type PollUpsertWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.PollWhereUniqueInput
  update: Prisma.XOR<Prisma.PollUpdateWithoutCreatorInput, Prisma.PollUncheckedUpdateWithoutCreatorInput>
  create: Prisma.XOR<Prisma.PollCreateWithoutCreatorInput, Prisma.PollUncheckedCreateWithoutCreatorInput>
}

export type PollUpdateWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.PollWhereUniqueInput
  data: Prisma.XOR<Prisma.PollUpdateWithoutCreatorInput, Prisma.PollUncheckedUpdateWithoutCreatorInput>
}

export type PollUpdateManyWithWhereWithoutCreatorInput = {
  where: Prisma.PollScalarWhereInput
  data: Prisma.XOR<Prisma.PollUpdateManyMutationInput, Prisma.PollUncheckedUpdateManyWithoutCreatorInput>
}

export type PollScalarWhereInput = {
  AND?: Prisma.PollScalarWhereInput | Prisma.PollScalarWhereInput[]
  OR?: Prisma.PollScalarWhereInput[]
  NOT?: Prisma.PollScalarWhereInput | Prisma.PollScalarWhereInput[]
  id?: Prisma.IntFilter<"Poll"> | number
  title?: Prisma.StringFilter<"Poll"> | string
  description?: Prisma.StringNullableFilter<"Poll"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Poll"> | Date | string
  creatorId?: Prisma.StringFilter<"Poll"> | string
}

export type PollUpsertWithWhereUniqueWithoutParticipantsInput = {
  where: Prisma.PollWhereUniqueInput
  update: Prisma.XOR<Prisma.PollUpdateWithoutParticipantsInput, Prisma.PollUncheckedUpdateWithoutParticipantsInput>
  create: Prisma.XOR<Prisma.PollCreateWithoutParticipantsInput, Prisma.PollUncheckedCreateWithoutParticipantsInput>
}

export type PollUpdateWithWhereUniqueWithoutParticipantsInput = {
  where: Prisma.PollWhereUniqueInput
  data: Prisma.XOR<Prisma.PollUpdateWithoutParticipantsInput, Prisma.PollUncheckedUpdateWithoutParticipantsInput>
}

export type PollUpdateManyWithWhereWithoutParticipantsInput = {
  where: Prisma.PollScalarWhereInput
  data: Prisma.XOR<Prisma.PollUpdateManyMutationInput, Prisma.PollUncheckedUpdateManyWithoutParticipantsInput>
}

export type PollCreateWithoutChoicesInput = {
  title: string
  description?: string | null
  createdAt?: Date | string
  creator: Prisma.UserCreateNestedOneWithoutCreatedPollsInput
  participants?: Prisma.UserCreateNestedManyWithoutParticipatedPollsInput
  participantChoices?: Prisma.UserChoiceCreateNestedManyWithoutPollInput
}

export type PollUncheckedCreateWithoutChoicesInput = {
  id?: number
  title: string
  description?: string | null
  createdAt?: Date | string
  creatorId: string
  participants?: Prisma.UserUncheckedCreateNestedManyWithoutParticipatedPollsInput
  participantChoices?: Prisma.UserChoiceUncheckedCreateNestedManyWithoutPollInput
}

export type PollCreateOrConnectWithoutChoicesInput = {
  where: Prisma.PollWhereUniqueInput
  create: Prisma.XOR<Prisma.PollCreateWithoutChoicesInput, Prisma.PollUncheckedCreateWithoutChoicesInput>
}

export type PollUpsertWithoutChoicesInput = {
  update: Prisma.XOR<Prisma.PollUpdateWithoutChoicesInput, Prisma.PollUncheckedUpdateWithoutChoicesInput>
  create: Prisma.XOR<Prisma.PollCreateWithoutChoicesInput, Prisma.PollUncheckedCreateWithoutChoicesInput>
  where?: Prisma.PollWhereInput
}

export type PollUpdateToOneWithWhereWithoutChoicesInput = {
  where?: Prisma.PollWhereInput
  data: Prisma.XOR<Prisma.PollUpdateWithoutChoicesInput, Prisma.PollUncheckedUpdateWithoutChoicesInput>
}

export type PollUpdateWithoutChoicesInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creator?: Prisma.UserUpdateOneRequiredWithoutCreatedPollsNestedInput
  participants?: Prisma.UserUpdateManyWithoutParticipatedPollsNestedInput
  participantChoices?: Prisma.UserChoiceUpdateManyWithoutPollNestedInput
}

export type PollUncheckedUpdateWithoutChoicesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  participants?: Prisma.UserUncheckedUpdateManyWithoutParticipatedPollsNestedInput
  participantChoices?: Prisma.UserChoiceUncheckedUpdateManyWithoutPollNestedInput
}

export type PollCreateWithoutParticipantChoicesInput = {
  title: string
  description?: string | null
  createdAt?: Date | string
  creator: Prisma.UserCreateNestedOneWithoutCreatedPollsInput
  choices?: Prisma.ChoiceCreateNestedManyWithoutPollInput
  participants?: Prisma.UserCreateNestedManyWithoutParticipatedPollsInput
}

export type PollUncheckedCreateWithoutParticipantChoicesInput = {
  id?: number
  title: string
  description?: string | null
  createdAt?: Date | string
  creatorId: string
  choices?: Prisma.ChoiceUncheckedCreateNestedManyWithoutPollInput
  participants?: Prisma.UserUncheckedCreateNestedManyWithoutParticipatedPollsInput
}

export type PollCreateOrConnectWithoutParticipantChoicesInput = {
  where: Prisma.PollWhereUniqueInput
  create: Prisma.XOR<Prisma.PollCreateWithoutParticipantChoicesInput, Prisma.PollUncheckedCreateWithoutParticipantChoicesInput>
}

export type PollUpsertWithoutParticipantChoicesInput = {
  update: Prisma.XOR<Prisma.PollUpdateWithoutParticipantChoicesInput, Prisma.PollUncheckedUpdateWithoutParticipantChoicesInput>
  create: Prisma.XOR<Prisma.PollCreateWithoutParticipantChoicesInput, Prisma.PollUncheckedCreateWithoutParticipantChoicesInput>
  where?: Prisma.PollWhereInput
}

export type PollUpdateToOneWithWhereWithoutParticipantChoicesInput = {
  where?: Prisma.PollWhereInput
  data: Prisma.XOR<Prisma.PollUpdateWithoutParticipantChoicesInput, Prisma.PollUncheckedUpdateWithoutParticipantChoicesInput>
}

export type PollUpdateWithoutParticipantChoicesInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creator?: Prisma.UserUpdateOneRequiredWithoutCreatedPollsNestedInput
  choices?: Prisma.ChoiceUpdateManyWithoutPollNestedInput
  participants?: Prisma.UserUpdateManyWithoutParticipatedPollsNestedInput
}

export type PollUncheckedUpdateWithoutParticipantChoicesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  choices?: Prisma.ChoiceUncheckedUpdateManyWithoutPollNestedInput
  participants?: Prisma.UserUncheckedUpdateManyWithoutParticipatedPollsNestedInput
}

export type PollCreateManyCreatorInput = {
  id?: number
  title: string
  description?: string | null
  createdAt?: Date | string
}

export type PollUpdateWithoutCreatorInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  choices?: Prisma.ChoiceUpdateManyWithoutPollNestedInput
  participants?: Prisma.UserUpdateManyWithoutParticipatedPollsNestedInput
  participantChoices?: Prisma.UserChoiceUpdateManyWithoutPollNestedInput
}

export type PollUncheckedUpdateWithoutCreatorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  choices?: Prisma.ChoiceUncheckedUpdateManyWithoutPollNestedInput
  participants?: Prisma.UserUncheckedUpdateManyWithoutParticipatedPollsNestedInput
  participantChoices?: Prisma.UserChoiceUncheckedUpdateManyWithoutPollNestedInput
}

export type PollUncheckedUpdateManyWithoutCreatorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PollUpdateWithoutParticipantsInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creator?: Prisma.UserUpdateOneRequiredWithoutCreatedPollsNestedInput
  choices?: Prisma.ChoiceUpdateManyWithoutPollNestedInput
  participantChoices?: Prisma.UserChoiceUpdateManyWithoutPollNestedInput
}

export type PollUncheckedUpdateWithoutParticipantsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
  choices?: Prisma.ChoiceUncheckedUpdateManyWithoutPollNestedInput
  participantChoices?: Prisma.UserChoiceUncheckedUpdateManyWithoutPollNestedInput
}

export type PollUncheckedUpdateManyWithoutParticipantsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type PollCountOutputType
 */

export type PollCountOutputType = {
  choices: number
  participants: number
  participantChoices: number
}

export type PollCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  choices?: boolean | PollCountOutputTypeCountChoicesArgs
  participants?: boolean | PollCountOutputTypeCountParticipantsArgs
  participantChoices?: boolean | PollCountOutputTypeCountParticipantChoicesArgs
}

/**
 * PollCountOutputType without action
 */
export type PollCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollCountOutputType
   */
  select?: Prisma.PollCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PollCountOutputType without action
 */
export type PollCountOutputTypeCountChoicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChoiceWhereInput
}

/**
 * PollCountOutputType without action
 */
export type PollCountOutputTypeCountParticipantsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserWhereInput
}

/**
 * PollCountOutputType without action
 */
export type PollCountOutputTypeCountParticipantChoicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserChoiceWhereInput
}


export type PollSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  createdAt?: boolean
  creatorId?: boolean
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  choices?: boolean | Prisma.Poll$choicesArgs<ExtArgs>
  participants?: boolean | Prisma.Poll$participantsArgs<ExtArgs>
  participantChoices?: boolean | Prisma.Poll$participantChoicesArgs<ExtArgs>
  _count?: boolean | Prisma.PollCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["poll"]>

export type PollSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  createdAt?: boolean
  creatorId?: boolean
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["poll"]>

export type PollSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  createdAt?: boolean
  creatorId?: boolean
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["poll"]>

export type PollSelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  createdAt?: boolean
  creatorId?: boolean
}

export type PollOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "createdAt" | "creatorId", ExtArgs["result"]["poll"]>
export type PollInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  choices?: boolean | Prisma.Poll$choicesArgs<ExtArgs>
  participants?: boolean | Prisma.Poll$participantsArgs<ExtArgs>
  participantChoices?: boolean | Prisma.Poll$participantChoicesArgs<ExtArgs>
  _count?: boolean | Prisma.PollCountOutputTypeDefaultArgs<ExtArgs>
}
export type PollIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type PollIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $PollPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Poll"
  objects: {
    creator: Prisma.$UserPayload<ExtArgs>
    choices: Prisma.$ChoicePayload<ExtArgs>[]
    participants: Prisma.$UserPayload<ExtArgs>[]
    participantChoices: Prisma.$UserChoicePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    title: string
    description: string | null
    createdAt: Date
    creatorId: string
  }, ExtArgs["result"]["poll"]>
  composites: {}
}

export type PollGetPayload<S extends boolean | null | undefined | PollDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PollPayload, S>

export type PollCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PollFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PollCountAggregateInputType | true
  }

export interface PollDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Poll'], meta: { name: 'Poll' } }
  /**
   * Find zero or one Poll that matches the filter.
   * @param {PollFindUniqueArgs} args - Arguments to find a Poll
   * @example
   * // Get one Poll
   * const poll = await prisma.poll.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PollFindUniqueArgs>(args: Prisma.SelectSubset<T, PollFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PollClient<runtime.Types.Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Poll that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PollFindUniqueOrThrowArgs} args - Arguments to find a Poll
   * @example
   * // Get one Poll
   * const poll = await prisma.poll.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PollFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PollFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PollClient<runtime.Types.Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Poll that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollFindFirstArgs} args - Arguments to find a Poll
   * @example
   * // Get one Poll
   * const poll = await prisma.poll.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PollFindFirstArgs>(args?: Prisma.SelectSubset<T, PollFindFirstArgs<ExtArgs>>): Prisma.Prisma__PollClient<runtime.Types.Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Poll that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollFindFirstOrThrowArgs} args - Arguments to find a Poll
   * @example
   * // Get one Poll
   * const poll = await prisma.poll.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PollFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PollFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PollClient<runtime.Types.Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Polls that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Polls
   * const polls = await prisma.poll.findMany()
   * 
   * // Get first 10 Polls
   * const polls = await prisma.poll.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pollWithIdOnly = await prisma.poll.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PollFindManyArgs>(args?: Prisma.SelectSubset<T, PollFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Poll.
   * @param {PollCreateArgs} args - Arguments to create a Poll.
   * @example
   * // Create one Poll
   * const Poll = await prisma.poll.create({
   *   data: {
   *     // ... data to create a Poll
   *   }
   * })
   * 
   */
  create<T extends PollCreateArgs>(args: Prisma.SelectSubset<T, PollCreateArgs<ExtArgs>>): Prisma.Prisma__PollClient<runtime.Types.Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Polls.
   * @param {PollCreateManyArgs} args - Arguments to create many Polls.
   * @example
   * // Create many Polls
   * const poll = await prisma.poll.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PollCreateManyArgs>(args?: Prisma.SelectSubset<T, PollCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Polls and returns the data saved in the database.
   * @param {PollCreateManyAndReturnArgs} args - Arguments to create many Polls.
   * @example
   * // Create many Polls
   * const poll = await prisma.poll.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Polls and only return the `id`
   * const pollWithIdOnly = await prisma.poll.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PollCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PollCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Poll.
   * @param {PollDeleteArgs} args - Arguments to delete one Poll.
   * @example
   * // Delete one Poll
   * const Poll = await prisma.poll.delete({
   *   where: {
   *     // ... filter to delete one Poll
   *   }
   * })
   * 
   */
  delete<T extends PollDeleteArgs>(args: Prisma.SelectSubset<T, PollDeleteArgs<ExtArgs>>): Prisma.Prisma__PollClient<runtime.Types.Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Poll.
   * @param {PollUpdateArgs} args - Arguments to update one Poll.
   * @example
   * // Update one Poll
   * const poll = await prisma.poll.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PollUpdateArgs>(args: Prisma.SelectSubset<T, PollUpdateArgs<ExtArgs>>): Prisma.Prisma__PollClient<runtime.Types.Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Polls.
   * @param {PollDeleteManyArgs} args - Arguments to filter Polls to delete.
   * @example
   * // Delete a few Polls
   * const { count } = await prisma.poll.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PollDeleteManyArgs>(args?: Prisma.SelectSubset<T, PollDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Polls.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Polls
   * const poll = await prisma.poll.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PollUpdateManyArgs>(args: Prisma.SelectSubset<T, PollUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Polls and returns the data updated in the database.
   * @param {PollUpdateManyAndReturnArgs} args - Arguments to update many Polls.
   * @example
   * // Update many Polls
   * const poll = await prisma.poll.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Polls and only return the `id`
   * const pollWithIdOnly = await prisma.poll.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PollUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PollUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Poll.
   * @param {PollUpsertArgs} args - Arguments to update or create a Poll.
   * @example
   * // Update or create a Poll
   * const poll = await prisma.poll.upsert({
   *   create: {
   *     // ... data to create a Poll
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Poll we want to update
   *   }
   * })
   */
  upsert<T extends PollUpsertArgs>(args: Prisma.SelectSubset<T, PollUpsertArgs<ExtArgs>>): Prisma.Prisma__PollClient<runtime.Types.Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Polls.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollCountArgs} args - Arguments to filter Polls to count.
   * @example
   * // Count the number of Polls
   * const count = await prisma.poll.count({
   *   where: {
   *     // ... the filter for the Polls we want to count
   *   }
   * })
  **/
  count<T extends PollCountArgs>(
    args?: Prisma.Subset<T, PollCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PollCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Poll.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PollAggregateArgs>(args: Prisma.Subset<T, PollAggregateArgs>): Prisma.PrismaPromise<GetPollAggregateType<T>>

  /**
   * Group by Poll.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PollGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PollGroupByArgs['orderBy'] }
      : { orderBy?: PollGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PollGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPollGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Poll model
 */
readonly fields: PollFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Poll.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PollClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  creator<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  choices<T extends Prisma.Poll$choicesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Poll$choicesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  participants<T extends Prisma.Poll$participantsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Poll$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  participantChoices<T extends Prisma.Poll$participantChoicesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Poll$participantChoicesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserChoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Poll model
 */
export interface PollFieldRefs {
  readonly id: Prisma.FieldRef<"Poll", 'Int'>
  readonly title: Prisma.FieldRef<"Poll", 'String'>
  readonly description: Prisma.FieldRef<"Poll", 'String'>
  readonly createdAt: Prisma.FieldRef<"Poll", 'DateTime'>
  readonly creatorId: Prisma.FieldRef<"Poll", 'String'>
}
    

// Custom InputTypes
/**
 * Poll findUnique
 */
export type PollFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null
  /**
   * Filter, which Poll to fetch.
   */
  where: Prisma.PollWhereUniqueInput
}

/**
 * Poll findUniqueOrThrow
 */
export type PollFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null
  /**
   * Filter, which Poll to fetch.
   */
  where: Prisma.PollWhereUniqueInput
}

/**
 * Poll findFirst
 */
export type PollFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null
  /**
   * Filter, which Poll to fetch.
   */
  where?: Prisma.PollWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Polls to fetch.
   */
  orderBy?: Prisma.PollOrderByWithRelationInput | Prisma.PollOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Polls.
   */
  cursor?: Prisma.PollWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Polls from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Polls.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Polls.
   */
  distinct?: Prisma.PollScalarFieldEnum | Prisma.PollScalarFieldEnum[]
}

/**
 * Poll findFirstOrThrow
 */
export type PollFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null
  /**
   * Filter, which Poll to fetch.
   */
  where?: Prisma.PollWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Polls to fetch.
   */
  orderBy?: Prisma.PollOrderByWithRelationInput | Prisma.PollOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Polls.
   */
  cursor?: Prisma.PollWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Polls from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Polls.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Polls.
   */
  distinct?: Prisma.PollScalarFieldEnum | Prisma.PollScalarFieldEnum[]
}

/**
 * Poll findMany
 */
export type PollFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null
  /**
   * Filter, which Polls to fetch.
   */
  where?: Prisma.PollWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Polls to fetch.
   */
  orderBy?: Prisma.PollOrderByWithRelationInput | Prisma.PollOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Polls.
   */
  cursor?: Prisma.PollWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Polls from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Polls.
   */
  skip?: number
  distinct?: Prisma.PollScalarFieldEnum | Prisma.PollScalarFieldEnum[]
}

/**
 * Poll create
 */
export type PollCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null
  /**
   * The data needed to create a Poll.
   */
  data: Prisma.XOR<Prisma.PollCreateInput, Prisma.PollUncheckedCreateInput>
}

/**
 * Poll createMany
 */
export type PollCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Polls.
   */
  data: Prisma.PollCreateManyInput | Prisma.PollCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Poll createManyAndReturn
 */
export type PollCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null
  /**
   * The data used to create many Polls.
   */
  data: Prisma.PollCreateManyInput | Prisma.PollCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Poll update
 */
export type PollUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null
  /**
   * The data needed to update a Poll.
   */
  data: Prisma.XOR<Prisma.PollUpdateInput, Prisma.PollUncheckedUpdateInput>
  /**
   * Choose, which Poll to update.
   */
  where: Prisma.PollWhereUniqueInput
}

/**
 * Poll updateMany
 */
export type PollUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Polls.
   */
  data: Prisma.XOR<Prisma.PollUpdateManyMutationInput, Prisma.PollUncheckedUpdateManyInput>
  /**
   * Filter which Polls to update
   */
  where?: Prisma.PollWhereInput
  /**
   * Limit how many Polls to update.
   */
  limit?: number
}

/**
 * Poll updateManyAndReturn
 */
export type PollUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null
  /**
   * The data used to update Polls.
   */
  data: Prisma.XOR<Prisma.PollUpdateManyMutationInput, Prisma.PollUncheckedUpdateManyInput>
  /**
   * Filter which Polls to update
   */
  where?: Prisma.PollWhereInput
  /**
   * Limit how many Polls to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Poll upsert
 */
export type PollUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null
  /**
   * The filter to search for the Poll to update in case it exists.
   */
  where: Prisma.PollWhereUniqueInput
  /**
   * In case the Poll found by the `where` argument doesn't exist, create a new Poll with this data.
   */
  create: Prisma.XOR<Prisma.PollCreateInput, Prisma.PollUncheckedCreateInput>
  /**
   * In case the Poll was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PollUpdateInput, Prisma.PollUncheckedUpdateInput>
}

/**
 * Poll delete
 */
export type PollDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null
  /**
   * Filter which Poll to delete.
   */
  where: Prisma.PollWhereUniqueInput
}

/**
 * Poll deleteMany
 */
export type PollDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Polls to delete
   */
  where?: Prisma.PollWhereInput
  /**
   * Limit how many Polls to delete.
   */
  limit?: number
}

/**
 * Poll.choices
 */
export type Poll$choicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Choice
   */
  select?: Prisma.ChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Choice
   */
  omit?: Prisma.ChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChoiceInclude<ExtArgs> | null
  where?: Prisma.ChoiceWhereInput
  orderBy?: Prisma.ChoiceOrderByWithRelationInput | Prisma.ChoiceOrderByWithRelationInput[]
  cursor?: Prisma.ChoiceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ChoiceScalarFieldEnum | Prisma.ChoiceScalarFieldEnum[]
}

/**
 * Poll.participants
 */
export type Poll$participantsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  cursor?: Prisma.UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * Poll.participantChoices
 */
export type Poll$participantChoicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChoice
   */
  select?: Prisma.UserChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChoice
   */
  omit?: Prisma.UserChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChoiceInclude<ExtArgs> | null
  where?: Prisma.UserChoiceWhereInput
  orderBy?: Prisma.UserChoiceOrderByWithRelationInput | Prisma.UserChoiceOrderByWithRelationInput[]
  cursor?: Prisma.UserChoiceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserChoiceScalarFieldEnum | Prisma.UserChoiceScalarFieldEnum[]
}

/**
 * Poll without action
 */
export type PollDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null
}
