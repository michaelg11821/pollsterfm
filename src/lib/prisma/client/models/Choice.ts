
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Choice` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Choice
 * 
 */
export type ChoiceModel = runtime.Types.Result.DefaultSelection<Prisma.$ChoicePayload>

export type AggregateChoice = {
  _count: ChoiceCountAggregateOutputType | null
  _avg: ChoiceAvgAggregateOutputType | null
  _sum: ChoiceSumAggregateOutputType | null
  _min: ChoiceMinAggregateOutputType | null
  _max: ChoiceMaxAggregateOutputType | null
}

export type ChoiceAvgAggregateOutputType = {
  id: number | null
  pollId: number | null
}

export type ChoiceSumAggregateOutputType = {
  id: number | null
  pollId: number | null
}

export type ChoiceMinAggregateOutputType = {
  id: number | null
  type: $Enums.ChoiceType | null
  genreUrl: string | null
  artistUrl: string | null
  trackUrl: string | null
  albumUrl: string | null
  pollId: number | null
}

export type ChoiceMaxAggregateOutputType = {
  id: number | null
  type: $Enums.ChoiceType | null
  genreUrl: string | null
  artistUrl: string | null
  trackUrl: string | null
  albumUrl: string | null
  pollId: number | null
}

export type ChoiceCountAggregateOutputType = {
  id: number
  type: number
  genreUrl: number
  artistUrl: number
  trackUrl: number
  albumUrl: number
  pollId: number
  _all: number
}


export type ChoiceAvgAggregateInputType = {
  id?: true
  pollId?: true
}

export type ChoiceSumAggregateInputType = {
  id?: true
  pollId?: true
}

export type ChoiceMinAggregateInputType = {
  id?: true
  type?: true
  genreUrl?: true
  artistUrl?: true
  trackUrl?: true
  albumUrl?: true
  pollId?: true
}

export type ChoiceMaxAggregateInputType = {
  id?: true
  type?: true
  genreUrl?: true
  artistUrl?: true
  trackUrl?: true
  albumUrl?: true
  pollId?: true
}

export type ChoiceCountAggregateInputType = {
  id?: true
  type?: true
  genreUrl?: true
  artistUrl?: true
  trackUrl?: true
  albumUrl?: true
  pollId?: true
  _all?: true
}

export type ChoiceAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Choice to aggregate.
   */
  where?: Prisma.ChoiceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Choices to fetch.
   */
  orderBy?: Prisma.ChoiceOrderByWithRelationInput | Prisma.ChoiceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChoiceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Choices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Choices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Choices
  **/
  _count?: true | ChoiceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ChoiceAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ChoiceSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChoiceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChoiceMaxAggregateInputType
}

export type GetChoiceAggregateType<T extends ChoiceAggregateArgs> = {
      [P in keyof T & keyof AggregateChoice]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChoice[P]>
    : Prisma.GetScalarType<T[P], AggregateChoice[P]>
}




export type ChoiceGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChoiceWhereInput
  orderBy?: Prisma.ChoiceOrderByWithAggregationInput | Prisma.ChoiceOrderByWithAggregationInput[]
  by: Prisma.ChoiceScalarFieldEnum[] | Prisma.ChoiceScalarFieldEnum
  having?: Prisma.ChoiceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChoiceCountAggregateInputType | true
  _avg?: ChoiceAvgAggregateInputType
  _sum?: ChoiceSumAggregateInputType
  _min?: ChoiceMinAggregateInputType
  _max?: ChoiceMaxAggregateInputType
}

export type ChoiceGroupByOutputType = {
  id: number
  type: $Enums.ChoiceType
  genreUrl: string | null
  artistUrl: string | null
  trackUrl: string | null
  albumUrl: string | null
  pollId: number
  _count: ChoiceCountAggregateOutputType | null
  _avg: ChoiceAvgAggregateOutputType | null
  _sum: ChoiceSumAggregateOutputType | null
  _min: ChoiceMinAggregateOutputType | null
  _max: ChoiceMaxAggregateOutputType | null
}

type GetChoiceGroupByPayload<T extends ChoiceGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChoiceGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChoiceGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChoiceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChoiceGroupByOutputType[P]>
      }
    >
  > 



export type ChoiceWhereInput = {
  AND?: Prisma.ChoiceWhereInput | Prisma.ChoiceWhereInput[]
  OR?: Prisma.ChoiceWhereInput[]
  NOT?: Prisma.ChoiceWhereInput | Prisma.ChoiceWhereInput[]
  id?: Prisma.IntFilter<"Choice"> | number
  type?: Prisma.EnumChoiceTypeFilter<"Choice"> | $Enums.ChoiceType
  genreUrl?: Prisma.StringNullableFilter<"Choice"> | string | null
  artistUrl?: Prisma.StringNullableFilter<"Choice"> | string | null
  trackUrl?: Prisma.StringNullableFilter<"Choice"> | string | null
  albumUrl?: Prisma.StringNullableFilter<"Choice"> | string | null
  pollId?: Prisma.IntFilter<"Choice"> | number
  poll?: Prisma.XOR<Prisma.PollScalarRelationFilter, Prisma.PollWhereInput>
  userChoices?: Prisma.UserChoiceListRelationFilter
}

export type ChoiceOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  genreUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  artistUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  trackUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  albumUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  pollId?: Prisma.SortOrder
  poll?: Prisma.PollOrderByWithRelationInput
  userChoices?: Prisma.UserChoiceOrderByRelationAggregateInput
}

export type ChoiceWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ChoiceWhereInput | Prisma.ChoiceWhereInput[]
  OR?: Prisma.ChoiceWhereInput[]
  NOT?: Prisma.ChoiceWhereInput | Prisma.ChoiceWhereInput[]
  type?: Prisma.EnumChoiceTypeFilter<"Choice"> | $Enums.ChoiceType
  genreUrl?: Prisma.StringNullableFilter<"Choice"> | string | null
  artistUrl?: Prisma.StringNullableFilter<"Choice"> | string | null
  trackUrl?: Prisma.StringNullableFilter<"Choice"> | string | null
  albumUrl?: Prisma.StringNullableFilter<"Choice"> | string | null
  pollId?: Prisma.IntFilter<"Choice"> | number
  poll?: Prisma.XOR<Prisma.PollScalarRelationFilter, Prisma.PollWhereInput>
  userChoices?: Prisma.UserChoiceListRelationFilter
}, "id">

export type ChoiceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  genreUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  artistUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  trackUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  albumUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  pollId?: Prisma.SortOrder
  _count?: Prisma.ChoiceCountOrderByAggregateInput
  _avg?: Prisma.ChoiceAvgOrderByAggregateInput
  _max?: Prisma.ChoiceMaxOrderByAggregateInput
  _min?: Prisma.ChoiceMinOrderByAggregateInput
  _sum?: Prisma.ChoiceSumOrderByAggregateInput
}

export type ChoiceScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChoiceScalarWhereWithAggregatesInput | Prisma.ChoiceScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChoiceScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChoiceScalarWhereWithAggregatesInput | Prisma.ChoiceScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Choice"> | number
  type?: Prisma.EnumChoiceTypeWithAggregatesFilter<"Choice"> | $Enums.ChoiceType
  genreUrl?: Prisma.StringNullableWithAggregatesFilter<"Choice"> | string | null
  artistUrl?: Prisma.StringNullableWithAggregatesFilter<"Choice"> | string | null
  trackUrl?: Prisma.StringNullableWithAggregatesFilter<"Choice"> | string | null
  albumUrl?: Prisma.StringNullableWithAggregatesFilter<"Choice"> | string | null
  pollId?: Prisma.IntWithAggregatesFilter<"Choice"> | number
}

export type ChoiceCreateInput = {
  type: $Enums.ChoiceType
  genreUrl?: string | null
  artistUrl?: string | null
  trackUrl?: string | null
  albumUrl?: string | null
  poll: Prisma.PollCreateNestedOneWithoutChoicesInput
  userChoices?: Prisma.UserChoiceCreateNestedManyWithoutChoiceInput
}

export type ChoiceUncheckedCreateInput = {
  id?: number
  type: $Enums.ChoiceType
  genreUrl?: string | null
  artistUrl?: string | null
  trackUrl?: string | null
  albumUrl?: string | null
  pollId: number
  userChoices?: Prisma.UserChoiceUncheckedCreateNestedManyWithoutChoiceInput
}

export type ChoiceUpdateInput = {
  type?: Prisma.EnumChoiceTypeFieldUpdateOperationsInput | $Enums.ChoiceType
  genreUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artistUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trackUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  albumUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poll?: Prisma.PollUpdateOneRequiredWithoutChoicesNestedInput
  userChoices?: Prisma.UserChoiceUpdateManyWithoutChoiceNestedInput
}

export type ChoiceUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumChoiceTypeFieldUpdateOperationsInput | $Enums.ChoiceType
  genreUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artistUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trackUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  albumUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pollId?: Prisma.IntFieldUpdateOperationsInput | number
  userChoices?: Prisma.UserChoiceUncheckedUpdateManyWithoutChoiceNestedInput
}

export type ChoiceCreateManyInput = {
  id?: number
  type: $Enums.ChoiceType
  genreUrl?: string | null
  artistUrl?: string | null
  trackUrl?: string | null
  albumUrl?: string | null
  pollId: number
}

export type ChoiceUpdateManyMutationInput = {
  type?: Prisma.EnumChoiceTypeFieldUpdateOperationsInput | $Enums.ChoiceType
  genreUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artistUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trackUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  albumUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ChoiceUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumChoiceTypeFieldUpdateOperationsInput | $Enums.ChoiceType
  genreUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artistUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trackUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  albumUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pollId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ChoiceListRelationFilter = {
  every?: Prisma.ChoiceWhereInput
  some?: Prisma.ChoiceWhereInput
  none?: Prisma.ChoiceWhereInput
}

export type ChoiceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ChoiceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  genreUrl?: Prisma.SortOrder
  artistUrl?: Prisma.SortOrder
  trackUrl?: Prisma.SortOrder
  albumUrl?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
}

export type ChoiceAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
}

export type ChoiceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  genreUrl?: Prisma.SortOrder
  artistUrl?: Prisma.SortOrder
  trackUrl?: Prisma.SortOrder
  albumUrl?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
}

export type ChoiceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  genreUrl?: Prisma.SortOrder
  artistUrl?: Prisma.SortOrder
  trackUrl?: Prisma.SortOrder
  albumUrl?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
}

export type ChoiceSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
}

export type ChoiceScalarRelationFilter = {
  is?: Prisma.ChoiceWhereInput
  isNot?: Prisma.ChoiceWhereInput
}

export type ChoiceCreateNestedManyWithoutPollInput = {
  create?: Prisma.XOR<Prisma.ChoiceCreateWithoutPollInput, Prisma.ChoiceUncheckedCreateWithoutPollInput> | Prisma.ChoiceCreateWithoutPollInput[] | Prisma.ChoiceUncheckedCreateWithoutPollInput[]
  connectOrCreate?: Prisma.ChoiceCreateOrConnectWithoutPollInput | Prisma.ChoiceCreateOrConnectWithoutPollInput[]
  createMany?: Prisma.ChoiceCreateManyPollInputEnvelope
  connect?: Prisma.ChoiceWhereUniqueInput | Prisma.ChoiceWhereUniqueInput[]
}

export type ChoiceUncheckedCreateNestedManyWithoutPollInput = {
  create?: Prisma.XOR<Prisma.ChoiceCreateWithoutPollInput, Prisma.ChoiceUncheckedCreateWithoutPollInput> | Prisma.ChoiceCreateWithoutPollInput[] | Prisma.ChoiceUncheckedCreateWithoutPollInput[]
  connectOrCreate?: Prisma.ChoiceCreateOrConnectWithoutPollInput | Prisma.ChoiceCreateOrConnectWithoutPollInput[]
  createMany?: Prisma.ChoiceCreateManyPollInputEnvelope
  connect?: Prisma.ChoiceWhereUniqueInput | Prisma.ChoiceWhereUniqueInput[]
}

export type ChoiceUpdateManyWithoutPollNestedInput = {
  create?: Prisma.XOR<Prisma.ChoiceCreateWithoutPollInput, Prisma.ChoiceUncheckedCreateWithoutPollInput> | Prisma.ChoiceCreateWithoutPollInput[] | Prisma.ChoiceUncheckedCreateWithoutPollInput[]
  connectOrCreate?: Prisma.ChoiceCreateOrConnectWithoutPollInput | Prisma.ChoiceCreateOrConnectWithoutPollInput[]
  upsert?: Prisma.ChoiceUpsertWithWhereUniqueWithoutPollInput | Prisma.ChoiceUpsertWithWhereUniqueWithoutPollInput[]
  createMany?: Prisma.ChoiceCreateManyPollInputEnvelope
  set?: Prisma.ChoiceWhereUniqueInput | Prisma.ChoiceWhereUniqueInput[]
  disconnect?: Prisma.ChoiceWhereUniqueInput | Prisma.ChoiceWhereUniqueInput[]
  delete?: Prisma.ChoiceWhereUniqueInput | Prisma.ChoiceWhereUniqueInput[]
  connect?: Prisma.ChoiceWhereUniqueInput | Prisma.ChoiceWhereUniqueInput[]
  update?: Prisma.ChoiceUpdateWithWhereUniqueWithoutPollInput | Prisma.ChoiceUpdateWithWhereUniqueWithoutPollInput[]
  updateMany?: Prisma.ChoiceUpdateManyWithWhereWithoutPollInput | Prisma.ChoiceUpdateManyWithWhereWithoutPollInput[]
  deleteMany?: Prisma.ChoiceScalarWhereInput | Prisma.ChoiceScalarWhereInput[]
}

export type ChoiceUncheckedUpdateManyWithoutPollNestedInput = {
  create?: Prisma.XOR<Prisma.ChoiceCreateWithoutPollInput, Prisma.ChoiceUncheckedCreateWithoutPollInput> | Prisma.ChoiceCreateWithoutPollInput[] | Prisma.ChoiceUncheckedCreateWithoutPollInput[]
  connectOrCreate?: Prisma.ChoiceCreateOrConnectWithoutPollInput | Prisma.ChoiceCreateOrConnectWithoutPollInput[]
  upsert?: Prisma.ChoiceUpsertWithWhereUniqueWithoutPollInput | Prisma.ChoiceUpsertWithWhereUniqueWithoutPollInput[]
  createMany?: Prisma.ChoiceCreateManyPollInputEnvelope
  set?: Prisma.ChoiceWhereUniqueInput | Prisma.ChoiceWhereUniqueInput[]
  disconnect?: Prisma.ChoiceWhereUniqueInput | Prisma.ChoiceWhereUniqueInput[]
  delete?: Prisma.ChoiceWhereUniqueInput | Prisma.ChoiceWhereUniqueInput[]
  connect?: Prisma.ChoiceWhereUniqueInput | Prisma.ChoiceWhereUniqueInput[]
  update?: Prisma.ChoiceUpdateWithWhereUniqueWithoutPollInput | Prisma.ChoiceUpdateWithWhereUniqueWithoutPollInput[]
  updateMany?: Prisma.ChoiceUpdateManyWithWhereWithoutPollInput | Prisma.ChoiceUpdateManyWithWhereWithoutPollInput[]
  deleteMany?: Prisma.ChoiceScalarWhereInput | Prisma.ChoiceScalarWhereInput[]
}

export type EnumChoiceTypeFieldUpdateOperationsInput = {
  set?: $Enums.ChoiceType
}

export type ChoiceCreateNestedOneWithoutUserChoicesInput = {
  create?: Prisma.XOR<Prisma.ChoiceCreateWithoutUserChoicesInput, Prisma.ChoiceUncheckedCreateWithoutUserChoicesInput>
  connectOrCreate?: Prisma.ChoiceCreateOrConnectWithoutUserChoicesInput
  connect?: Prisma.ChoiceWhereUniqueInput
}

export type ChoiceUpdateOneRequiredWithoutUserChoicesNestedInput = {
  create?: Prisma.XOR<Prisma.ChoiceCreateWithoutUserChoicesInput, Prisma.ChoiceUncheckedCreateWithoutUserChoicesInput>
  connectOrCreate?: Prisma.ChoiceCreateOrConnectWithoutUserChoicesInput
  upsert?: Prisma.ChoiceUpsertWithoutUserChoicesInput
  connect?: Prisma.ChoiceWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ChoiceUpdateToOneWithWhereWithoutUserChoicesInput, Prisma.ChoiceUpdateWithoutUserChoicesInput>, Prisma.ChoiceUncheckedUpdateWithoutUserChoicesInput>
}

export type ChoiceCreateWithoutPollInput = {
  type: $Enums.ChoiceType
  genreUrl?: string | null
  artistUrl?: string | null
  trackUrl?: string | null
  albumUrl?: string | null
  userChoices?: Prisma.UserChoiceCreateNestedManyWithoutChoiceInput
}

export type ChoiceUncheckedCreateWithoutPollInput = {
  id?: number
  type: $Enums.ChoiceType
  genreUrl?: string | null
  artistUrl?: string | null
  trackUrl?: string | null
  albumUrl?: string | null
  userChoices?: Prisma.UserChoiceUncheckedCreateNestedManyWithoutChoiceInput
}

export type ChoiceCreateOrConnectWithoutPollInput = {
  where: Prisma.ChoiceWhereUniqueInput
  create: Prisma.XOR<Prisma.ChoiceCreateWithoutPollInput, Prisma.ChoiceUncheckedCreateWithoutPollInput>
}

export type ChoiceCreateManyPollInputEnvelope = {
  data: Prisma.ChoiceCreateManyPollInput | Prisma.ChoiceCreateManyPollInput[]
  skipDuplicates?: boolean
}

export type ChoiceUpsertWithWhereUniqueWithoutPollInput = {
  where: Prisma.ChoiceWhereUniqueInput
  update: Prisma.XOR<Prisma.ChoiceUpdateWithoutPollInput, Prisma.ChoiceUncheckedUpdateWithoutPollInput>
  create: Prisma.XOR<Prisma.ChoiceCreateWithoutPollInput, Prisma.ChoiceUncheckedCreateWithoutPollInput>
}

export type ChoiceUpdateWithWhereUniqueWithoutPollInput = {
  where: Prisma.ChoiceWhereUniqueInput
  data: Prisma.XOR<Prisma.ChoiceUpdateWithoutPollInput, Prisma.ChoiceUncheckedUpdateWithoutPollInput>
}

export type ChoiceUpdateManyWithWhereWithoutPollInput = {
  where: Prisma.ChoiceScalarWhereInput
  data: Prisma.XOR<Prisma.ChoiceUpdateManyMutationInput, Prisma.ChoiceUncheckedUpdateManyWithoutPollInput>
}

export type ChoiceScalarWhereInput = {
  AND?: Prisma.ChoiceScalarWhereInput | Prisma.ChoiceScalarWhereInput[]
  OR?: Prisma.ChoiceScalarWhereInput[]
  NOT?: Prisma.ChoiceScalarWhereInput | Prisma.ChoiceScalarWhereInput[]
  id?: Prisma.IntFilter<"Choice"> | number
  type?: Prisma.EnumChoiceTypeFilter<"Choice"> | $Enums.ChoiceType
  genreUrl?: Prisma.StringNullableFilter<"Choice"> | string | null
  artistUrl?: Prisma.StringNullableFilter<"Choice"> | string | null
  trackUrl?: Prisma.StringNullableFilter<"Choice"> | string | null
  albumUrl?: Prisma.StringNullableFilter<"Choice"> | string | null
  pollId?: Prisma.IntFilter<"Choice"> | number
}

export type ChoiceCreateWithoutUserChoicesInput = {
  type: $Enums.ChoiceType
  genreUrl?: string | null
  artistUrl?: string | null
  trackUrl?: string | null
  albumUrl?: string | null
  poll: Prisma.PollCreateNestedOneWithoutChoicesInput
}

export type ChoiceUncheckedCreateWithoutUserChoicesInput = {
  id?: number
  type: $Enums.ChoiceType
  genreUrl?: string | null
  artistUrl?: string | null
  trackUrl?: string | null
  albumUrl?: string | null
  pollId: number
}

export type ChoiceCreateOrConnectWithoutUserChoicesInput = {
  where: Prisma.ChoiceWhereUniqueInput
  create: Prisma.XOR<Prisma.ChoiceCreateWithoutUserChoicesInput, Prisma.ChoiceUncheckedCreateWithoutUserChoicesInput>
}

export type ChoiceUpsertWithoutUserChoicesInput = {
  update: Prisma.XOR<Prisma.ChoiceUpdateWithoutUserChoicesInput, Prisma.ChoiceUncheckedUpdateWithoutUserChoicesInput>
  create: Prisma.XOR<Prisma.ChoiceCreateWithoutUserChoicesInput, Prisma.ChoiceUncheckedCreateWithoutUserChoicesInput>
  where?: Prisma.ChoiceWhereInput
}

export type ChoiceUpdateToOneWithWhereWithoutUserChoicesInput = {
  where?: Prisma.ChoiceWhereInput
  data: Prisma.XOR<Prisma.ChoiceUpdateWithoutUserChoicesInput, Prisma.ChoiceUncheckedUpdateWithoutUserChoicesInput>
}

export type ChoiceUpdateWithoutUserChoicesInput = {
  type?: Prisma.EnumChoiceTypeFieldUpdateOperationsInput | $Enums.ChoiceType
  genreUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artistUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trackUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  albumUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  poll?: Prisma.PollUpdateOneRequiredWithoutChoicesNestedInput
}

export type ChoiceUncheckedUpdateWithoutUserChoicesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumChoiceTypeFieldUpdateOperationsInput | $Enums.ChoiceType
  genreUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artistUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trackUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  albumUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  pollId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ChoiceCreateManyPollInput = {
  id?: number
  type: $Enums.ChoiceType
  genreUrl?: string | null
  artistUrl?: string | null
  trackUrl?: string | null
  albumUrl?: string | null
}

export type ChoiceUpdateWithoutPollInput = {
  type?: Prisma.EnumChoiceTypeFieldUpdateOperationsInput | $Enums.ChoiceType
  genreUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artistUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trackUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  albumUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userChoices?: Prisma.UserChoiceUpdateManyWithoutChoiceNestedInput
}

export type ChoiceUncheckedUpdateWithoutPollInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumChoiceTypeFieldUpdateOperationsInput | $Enums.ChoiceType
  genreUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artistUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trackUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  albumUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userChoices?: Prisma.UserChoiceUncheckedUpdateManyWithoutChoiceNestedInput
}

export type ChoiceUncheckedUpdateManyWithoutPollInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumChoiceTypeFieldUpdateOperationsInput | $Enums.ChoiceType
  genreUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  artistUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trackUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  albumUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type ChoiceCountOutputType
 */

export type ChoiceCountOutputType = {
  userChoices: number
}

export type ChoiceCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  userChoices?: boolean | ChoiceCountOutputTypeCountUserChoicesArgs
}

/**
 * ChoiceCountOutputType without action
 */
export type ChoiceCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChoiceCountOutputType
   */
  select?: Prisma.ChoiceCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ChoiceCountOutputType without action
 */
export type ChoiceCountOutputTypeCountUserChoicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserChoiceWhereInput
}


export type ChoiceSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  genreUrl?: boolean
  artistUrl?: boolean
  trackUrl?: boolean
  albumUrl?: boolean
  pollId?: boolean
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
  userChoices?: boolean | Prisma.Choice$userChoicesArgs<ExtArgs>
  _count?: boolean | Prisma.ChoiceCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["choice"]>

export type ChoiceSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  genreUrl?: boolean
  artistUrl?: boolean
  trackUrl?: boolean
  albumUrl?: boolean
  pollId?: boolean
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
}, ExtArgs["result"]["choice"]>

export type ChoiceSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  genreUrl?: boolean
  artistUrl?: boolean
  trackUrl?: boolean
  albumUrl?: boolean
  pollId?: boolean
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
}, ExtArgs["result"]["choice"]>

export type ChoiceSelectScalar = {
  id?: boolean
  type?: boolean
  genreUrl?: boolean
  artistUrl?: boolean
  trackUrl?: boolean
  albumUrl?: boolean
  pollId?: boolean
}

export type ChoiceOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "type" | "genreUrl" | "artistUrl" | "trackUrl" | "albumUrl" | "pollId", ExtArgs["result"]["choice"]>
export type ChoiceInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
  userChoices?: boolean | Prisma.Choice$userChoicesArgs<ExtArgs>
  _count?: boolean | Prisma.ChoiceCountOutputTypeDefaultArgs<ExtArgs>
}
export type ChoiceIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
}
export type ChoiceIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
}

export type $ChoicePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Choice"
  objects: {
    poll: Prisma.$PollPayload<ExtArgs>
    userChoices: Prisma.$UserChoicePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    type: $Enums.ChoiceType
    genreUrl: string | null
    artistUrl: string | null
    trackUrl: string | null
    albumUrl: string | null
    pollId: number
  }, ExtArgs["result"]["choice"]>
  composites: {}
}

export type ChoiceGetPayload<S extends boolean | null | undefined | ChoiceDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChoicePayload, S>

export type ChoiceCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChoiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChoiceCountAggregateInputType | true
  }

export interface ChoiceDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Choice'], meta: { name: 'Choice' } }
  /**
   * Find zero or one Choice that matches the filter.
   * @param {ChoiceFindUniqueArgs} args - Arguments to find a Choice
   * @example
   * // Get one Choice
   * const choice = await prisma.choice.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChoiceFindUniqueArgs>(args: Prisma.SelectSubset<T, ChoiceFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChoiceClient<runtime.Types.Result.GetResult<Prisma.$ChoicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Choice that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChoiceFindUniqueOrThrowArgs} args - Arguments to find a Choice
   * @example
   * // Get one Choice
   * const choice = await prisma.choice.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChoiceFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChoiceClient<runtime.Types.Result.GetResult<Prisma.$ChoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Choice that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChoiceFindFirstArgs} args - Arguments to find a Choice
   * @example
   * // Get one Choice
   * const choice = await prisma.choice.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChoiceFindFirstArgs>(args?: Prisma.SelectSubset<T, ChoiceFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChoiceClient<runtime.Types.Result.GetResult<Prisma.$ChoicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Choice that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChoiceFindFirstOrThrowArgs} args - Arguments to find a Choice
   * @example
   * // Get one Choice
   * const choice = await prisma.choice.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChoiceFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChoiceClient<runtime.Types.Result.GetResult<Prisma.$ChoicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Choices that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChoiceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Choices
   * const choices = await prisma.choice.findMany()
   * 
   * // Get first 10 Choices
   * const choices = await prisma.choice.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const choiceWithIdOnly = await prisma.choice.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChoiceFindManyArgs>(args?: Prisma.SelectSubset<T, ChoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Choice.
   * @param {ChoiceCreateArgs} args - Arguments to create a Choice.
   * @example
   * // Create one Choice
   * const Choice = await prisma.choice.create({
   *   data: {
   *     // ... data to create a Choice
   *   }
   * })
   * 
   */
  create<T extends ChoiceCreateArgs>(args: Prisma.SelectSubset<T, ChoiceCreateArgs<ExtArgs>>): Prisma.Prisma__ChoiceClient<runtime.Types.Result.GetResult<Prisma.$ChoicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Choices.
   * @param {ChoiceCreateManyArgs} args - Arguments to create many Choices.
   * @example
   * // Create many Choices
   * const choice = await prisma.choice.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChoiceCreateManyArgs>(args?: Prisma.SelectSubset<T, ChoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Choices and returns the data saved in the database.
   * @param {ChoiceCreateManyAndReturnArgs} args - Arguments to create many Choices.
   * @example
   * // Create many Choices
   * const choice = await prisma.choice.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Choices and only return the `id`
   * const choiceWithIdOnly = await prisma.choice.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ChoiceCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ChoiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChoicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Choice.
   * @param {ChoiceDeleteArgs} args - Arguments to delete one Choice.
   * @example
   * // Delete one Choice
   * const Choice = await prisma.choice.delete({
   *   where: {
   *     // ... filter to delete one Choice
   *   }
   * })
   * 
   */
  delete<T extends ChoiceDeleteArgs>(args: Prisma.SelectSubset<T, ChoiceDeleteArgs<ExtArgs>>): Prisma.Prisma__ChoiceClient<runtime.Types.Result.GetResult<Prisma.$ChoicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Choice.
   * @param {ChoiceUpdateArgs} args - Arguments to update one Choice.
   * @example
   * // Update one Choice
   * const choice = await prisma.choice.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChoiceUpdateArgs>(args: Prisma.SelectSubset<T, ChoiceUpdateArgs<ExtArgs>>): Prisma.Prisma__ChoiceClient<runtime.Types.Result.GetResult<Prisma.$ChoicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Choices.
   * @param {ChoiceDeleteManyArgs} args - Arguments to filter Choices to delete.
   * @example
   * // Delete a few Choices
   * const { count } = await prisma.choice.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChoiceDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Choices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChoiceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Choices
   * const choice = await prisma.choice.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChoiceUpdateManyArgs>(args: Prisma.SelectSubset<T, ChoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Choices and returns the data updated in the database.
   * @param {ChoiceUpdateManyAndReturnArgs} args - Arguments to update many Choices.
   * @example
   * // Update many Choices
   * const choice = await prisma.choice.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Choices and only return the `id`
   * const choiceWithIdOnly = await prisma.choice.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ChoiceUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ChoiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChoicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Choice.
   * @param {ChoiceUpsertArgs} args - Arguments to update or create a Choice.
   * @example
   * // Update or create a Choice
   * const choice = await prisma.choice.upsert({
   *   create: {
   *     // ... data to create a Choice
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Choice we want to update
   *   }
   * })
   */
  upsert<T extends ChoiceUpsertArgs>(args: Prisma.SelectSubset<T, ChoiceUpsertArgs<ExtArgs>>): Prisma.Prisma__ChoiceClient<runtime.Types.Result.GetResult<Prisma.$ChoicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Choices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChoiceCountArgs} args - Arguments to filter Choices to count.
   * @example
   * // Count the number of Choices
   * const count = await prisma.choice.count({
   *   where: {
   *     // ... the filter for the Choices we want to count
   *   }
   * })
  **/
  count<T extends ChoiceCountArgs>(
    args?: Prisma.Subset<T, ChoiceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChoiceCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Choice.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChoiceAggregateArgs>(args: Prisma.Subset<T, ChoiceAggregateArgs>): Prisma.PrismaPromise<GetChoiceAggregateType<T>>

  /**
   * Group by Choice.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChoiceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChoiceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChoiceGroupByArgs['orderBy'] }
      : { orderBy?: ChoiceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Choice model
 */
readonly fields: ChoiceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Choice.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChoiceClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  poll<T extends Prisma.PollDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PollDefaultArgs<ExtArgs>>): Prisma.Prisma__PollClient<runtime.Types.Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  userChoices<T extends Prisma.Choice$userChoicesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Choice$userChoicesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserChoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Choice model
 */
export interface ChoiceFieldRefs {
  readonly id: Prisma.FieldRef<"Choice", 'Int'>
  readonly type: Prisma.FieldRef<"Choice", 'ChoiceType'>
  readonly genreUrl: Prisma.FieldRef<"Choice", 'String'>
  readonly artistUrl: Prisma.FieldRef<"Choice", 'String'>
  readonly trackUrl: Prisma.FieldRef<"Choice", 'String'>
  readonly albumUrl: Prisma.FieldRef<"Choice", 'String'>
  readonly pollId: Prisma.FieldRef<"Choice", 'Int'>
}
    

// Custom InputTypes
/**
 * Choice findUnique
 */
export type ChoiceFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Choice
   */
  select?: Prisma.ChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Choice
   */
  omit?: Prisma.ChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChoiceInclude<ExtArgs> | null
  /**
   * Filter, which Choice to fetch.
   */
  where: Prisma.ChoiceWhereUniqueInput
}

/**
 * Choice findUniqueOrThrow
 */
export type ChoiceFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Choice
   */
  select?: Prisma.ChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Choice
   */
  omit?: Prisma.ChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChoiceInclude<ExtArgs> | null
  /**
   * Filter, which Choice to fetch.
   */
  where: Prisma.ChoiceWhereUniqueInput
}

/**
 * Choice findFirst
 */
export type ChoiceFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Choice
   */
  select?: Prisma.ChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Choice
   */
  omit?: Prisma.ChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChoiceInclude<ExtArgs> | null
  /**
   * Filter, which Choice to fetch.
   */
  where?: Prisma.ChoiceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Choices to fetch.
   */
  orderBy?: Prisma.ChoiceOrderByWithRelationInput | Prisma.ChoiceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Choices.
   */
  cursor?: Prisma.ChoiceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Choices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Choices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Choices.
   */
  distinct?: Prisma.ChoiceScalarFieldEnum | Prisma.ChoiceScalarFieldEnum[]
}

/**
 * Choice findFirstOrThrow
 */
export type ChoiceFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Choice
   */
  select?: Prisma.ChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Choice
   */
  omit?: Prisma.ChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChoiceInclude<ExtArgs> | null
  /**
   * Filter, which Choice to fetch.
   */
  where?: Prisma.ChoiceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Choices to fetch.
   */
  orderBy?: Prisma.ChoiceOrderByWithRelationInput | Prisma.ChoiceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Choices.
   */
  cursor?: Prisma.ChoiceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Choices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Choices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Choices.
   */
  distinct?: Prisma.ChoiceScalarFieldEnum | Prisma.ChoiceScalarFieldEnum[]
}

/**
 * Choice findMany
 */
export type ChoiceFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Choice
   */
  select?: Prisma.ChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Choice
   */
  omit?: Prisma.ChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChoiceInclude<ExtArgs> | null
  /**
   * Filter, which Choices to fetch.
   */
  where?: Prisma.ChoiceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Choices to fetch.
   */
  orderBy?: Prisma.ChoiceOrderByWithRelationInput | Prisma.ChoiceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Choices.
   */
  cursor?: Prisma.ChoiceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Choices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Choices.
   */
  skip?: number
  distinct?: Prisma.ChoiceScalarFieldEnum | Prisma.ChoiceScalarFieldEnum[]
}

/**
 * Choice create
 */
export type ChoiceCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Choice
   */
  select?: Prisma.ChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Choice
   */
  omit?: Prisma.ChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChoiceInclude<ExtArgs> | null
  /**
   * The data needed to create a Choice.
   */
  data: Prisma.XOR<Prisma.ChoiceCreateInput, Prisma.ChoiceUncheckedCreateInput>
}

/**
 * Choice createMany
 */
export type ChoiceCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Choices.
   */
  data: Prisma.ChoiceCreateManyInput | Prisma.ChoiceCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Choice createManyAndReturn
 */
export type ChoiceCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Choice
   */
  select?: Prisma.ChoiceSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Choice
   */
  omit?: Prisma.ChoiceOmit<ExtArgs> | null
  /**
   * The data used to create many Choices.
   */
  data: Prisma.ChoiceCreateManyInput | Prisma.ChoiceCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChoiceIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Choice update
 */
export type ChoiceUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Choice
   */
  select?: Prisma.ChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Choice
   */
  omit?: Prisma.ChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChoiceInclude<ExtArgs> | null
  /**
   * The data needed to update a Choice.
   */
  data: Prisma.XOR<Prisma.ChoiceUpdateInput, Prisma.ChoiceUncheckedUpdateInput>
  /**
   * Choose, which Choice to update.
   */
  where: Prisma.ChoiceWhereUniqueInput
}

/**
 * Choice updateMany
 */
export type ChoiceUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Choices.
   */
  data: Prisma.XOR<Prisma.ChoiceUpdateManyMutationInput, Prisma.ChoiceUncheckedUpdateManyInput>
  /**
   * Filter which Choices to update
   */
  where?: Prisma.ChoiceWhereInput
  /**
   * Limit how many Choices to update.
   */
  limit?: number
}

/**
 * Choice updateManyAndReturn
 */
export type ChoiceUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Choice
   */
  select?: Prisma.ChoiceSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Choice
   */
  omit?: Prisma.ChoiceOmit<ExtArgs> | null
  /**
   * The data used to update Choices.
   */
  data: Prisma.XOR<Prisma.ChoiceUpdateManyMutationInput, Prisma.ChoiceUncheckedUpdateManyInput>
  /**
   * Filter which Choices to update
   */
  where?: Prisma.ChoiceWhereInput
  /**
   * Limit how many Choices to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChoiceIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Choice upsert
 */
export type ChoiceUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Choice
   */
  select?: Prisma.ChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Choice
   */
  omit?: Prisma.ChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChoiceInclude<ExtArgs> | null
  /**
   * The filter to search for the Choice to update in case it exists.
   */
  where: Prisma.ChoiceWhereUniqueInput
  /**
   * In case the Choice found by the `where` argument doesn't exist, create a new Choice with this data.
   */
  create: Prisma.XOR<Prisma.ChoiceCreateInput, Prisma.ChoiceUncheckedCreateInput>
  /**
   * In case the Choice was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChoiceUpdateInput, Prisma.ChoiceUncheckedUpdateInput>
}

/**
 * Choice delete
 */
export type ChoiceDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Choice
   */
  select?: Prisma.ChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Choice
   */
  omit?: Prisma.ChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChoiceInclude<ExtArgs> | null
  /**
   * Filter which Choice to delete.
   */
  where: Prisma.ChoiceWhereUniqueInput
}

/**
 * Choice deleteMany
 */
export type ChoiceDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Choices to delete
   */
  where?: Prisma.ChoiceWhereInput
  /**
   * Limit how many Choices to delete.
   */
  limit?: number
}

/**
 * Choice.userChoices
 */
export type Choice$userChoicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserChoice
   */
  select?: Prisma.UserChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserChoice
   */
  omit?: Prisma.UserChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserChoiceInclude<ExtArgs> | null
  where?: Prisma.UserChoiceWhereInput
  orderBy?: Prisma.UserChoiceOrderByWithRelationInput | Prisma.UserChoiceOrderByWithRelationInput[]
  cursor?: Prisma.UserChoiceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserChoiceScalarFieldEnum | Prisma.UserChoiceScalarFieldEnum[]
}

/**
 * Choice without action
 */
export type ChoiceDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Choice
   */
  select?: Prisma.ChoiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Choice
   */
  omit?: Prisma.ChoiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChoiceInclude<ExtArgs> | null
}
